// Fabula version 0.15.0 generated by Haxe
(function ($hx_exports, $global) { "use strict";
$hx_exports["fabula"] = $hx_exports["fabula"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return js_Lib.get_undefined();
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(js_Boot.isClass(f) || js_Boot.isEnum(f));
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = StringTools.fastCodeAt(x,i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = StringTools.fastCodeAt(x,i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,addChar: function(c) {
		this.b += String.fromCodePoint(c);
	}
	,addSub: function(s,pos,len) {
		this.b += len == null ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf = new StringBuf();
	var _g = new haxe_iterators_StringIteratorUnicode(s);
	while(_g.hasNext()) {
		var code = _g.next();
		switch(code) {
		case 34:
			if(quotes) {
				buf.add("&quot;");
			} else {
				buf.addChar(code);
			}
			break;
		case 38:
			buf.add("&amp;");
			break;
		case 39:
			if(quotes) {
				buf.add("&#039;");
			} else {
				buf.addChar(code);
			}
			break;
		case 60:
			buf.add("&lt;");
			break;
		case 62:
			buf.add("&gt;");
			break;
		default:
			buf.addChar(code);
		}
	}
	return buf.toString();
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.unsafeCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.utf16CodePointAt = function(s,index) {
	var c = StringTools.fastCodeAt(s,index);
	if(c >= 55296 && c <= 56319) {
		c = c - 55232 << 10 | StringTools.fastCodeAt(s,index + 1) & 1023;
	}
	return c;
};
var Type = function() { };
Type.__name__ = "Type";
Type.getClass = function(o) {
	return js_Boot.getClass(o);
};
Type.getClassName = function(c) {
	return c.__name__;
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = haxe_ds_Map.toStringMap(null);
};
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	xml.set_nodeName(name);
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	xml.set_nodeValue(data);
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	xml.set_nodeValue(data);
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	xml.set_nodeValue(data);
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	xml.set_nodeValue(data);
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	xml.set_nodeValue(data);
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get_nodeName: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.nodeName;
	}
	,set_nodeName: function(v) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.nodeName = v;
	}
	,get_nodeValue: function() {
		if(this.nodeType == Xml.Document || this.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.nodeValue;
	}
	,set_nodeValue: function(v) {
		if(this.nodeType == Xml.Document || this.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.nodeValue = v;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_Map.get(this.attributeMap,att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		haxe_ds_Map.set(this.attributeMap,att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_Map.exists(this.attributeMap,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_Map.keys(this.attributeMap);
	}
	,iterator: function() {
		this.ensureElementType();
		return new haxe_iterators_ArrayIterator(this.children);
	}
	,elements: function() {
		this.ensureElementType();
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		this.ensureElementType();
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element && child.get_nodeName() == name) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		this.ensureElementType();
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		this.ensureElementType();
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		this.ensureElementType();
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,ensureElementType: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
	}
	,__class__: Xml
};
var fabula_Choice = function(id,text,type,condition,target,exit,limit) {
	if(limit == null) {
		limit = 0;
	}
	if(exit == null) {
		exit = false;
	}
	this.id = id;
	this.text = text != "" && text != null ? text : id;
	this.type = type;
	this.target = target;
	this.condition = condition;
	this.isExit = exit;
	this.limit = limit;
	this.count = 0;
	fabula_condition_ConditionFactory.helperList.set(this.id,fabula_condition_EConditionType.EVENT);
};
fabula_Choice.__name__ = "fabula.Choice";
fabula_Choice.prototype = {
	addVariable: function(id,content) {
		if(this.variables == null) {
			this.variables = new haxe_ds_StringMap();
		}
		this.variables.set(id,content);
	}
	,__class__: fabula_Choice
};
var fabula_Event = function(id,text,conditions,isExit,weight,limit,speaker,listeners,environment,target) {
	if(limit == null) {
		limit = 0;
	}
	if(weight == null) {
		weight = 1;
	}
	if(isExit == null) {
		isExit = false;
	}
	this.id = id;
	this.text = text;
	this.conditions = conditions;
	this.isExit = isExit;
	this.limit = limit;
	this.count = 0;
	this.speaker = speaker;
	this.listeners = listeners;
	this.environment = environment;
	this.target = target;
	fabula_condition_ConditionFactory.helperList.set(this.id,fabula_condition_EConditionType.EVENT);
};
fabula_Event.__name__ = "fabula.Event";
fabula_Event.prototype = {
	getChoices: function() {
		this._cacheChoices = [];
		if(this.choices != null) {
			var _g = 0;
			var _g1 = this.choices.length;
			while(_g < _g1) {
				var i = _g++;
				var hasOnceLimit = this.choices[i].limit > 0 && this.choices[i].count >= this.choices[i].limit;
				if(!hasOnceLimit) {
					if(this.choices[i].condition == null || this.choices[i].condition.test()) {
						this._cacheChoices.push(this.choices[i]);
					}
				}
			}
		}
		if(this._cacheChoices.length == 0) {
			if(this.isExit) {
				this._cacheChoices.push(new fabula_Choice("EXIT",fabula_Fabula.QUIT,"quit",null,this.target,true));
			} else {
				this._cacheChoices.push(new fabula_Choice("CONTINUE",fabula_Fabula.CONTINUE,"continue",null,this.target));
			}
		}
		return this._cacheChoices;
	}
	,selectChoice: function(id,index,selectFromAll) {
		if(selectFromAll == null) {
			selectFromAll = false;
		}
		var _choiceArray = selectFromAll ? this.choices : this._cacheChoices;
		var selected = null;
		if(_choiceArray != null) {
			if(id != null) {
				var _g = 0;
				var _g1 = _choiceArray.length;
				while(_g < _g1) {
					var i = _g++;
					if(_choiceArray[i].id == id) {
						selected = _choiceArray[i];
						break;
					}
				}
			} else if(index != null) {
				selected = _choiceArray[index];
			}
		}
		if(selected != null) {
			selected.count++;
		}
		return selected;
	}
	,testConditions: function() {
		var hasOnceLimit = this.limit > 0 && this.count >= this.limit;
		if(this.conditions == null) {
			return !hasOnceLimit;
		}
		if(!hasOnceLimit) {
			return this.conditions.test();
		} else {
			return false;
		}
	}
	,addChoice: function(choice) {
		if(this.choices == null) {
			this.choices = [];
			this._cacheChoices = [];
		}
		this.choices.push(choice);
	}
	,__class__: fabula_Event
};
var fabula_EEventType = $hxEnums["fabula.EEventType"] = { __ename__:true,__constructs__:null
	,QUEST: {_hx_name:"QUEST",_hx_index:0,__enum__:"fabula.EEventType",toString:$estr}
	,RANDOM_ENCOUNTER: {_hx_name:"RANDOM_ENCOUNTER",_hx_index:1,__enum__:"fabula.EEventType",toString:$estr}
	,SCENE: {_hx_name:"SCENE",_hx_index:2,__enum__:"fabula.EEventType",toString:$estr}
};
fabula_EEventType.__constructs__ = [fabula_EEventType.QUEST,fabula_EEventType.RANDOM_ENCOUNTER,fabula_EEventType.SCENE];
var fabula_EPlayingType = $hxEnums["fabula.EPlayingType"] = { __ename__:true,__constructs__:null
	,SEQUENCE: {_hx_name:"SEQUENCE",_hx_index:0,__enum__:"fabula.EPlayingType",toString:$estr}
	,DRAW: {_hx_name:"DRAW",_hx_index:1,__enum__:"fabula.EPlayingType",toString:$estr}
};
fabula_EPlayingType.__constructs__ = [fabula_EPlayingType.SEQUENCE,fabula_EPlayingType.DRAW];
var fabula_Fabula = $hx_exports["fabula"]["Fabula"] = function(files,completedCallback) {
	this._questsID = [];
	this._encountersID = [];
	this._textsID = [];
	this.completedID = [];
	this._completedCallback = completedCallback;
	this.conditionFactory = new fabula_condition_ConditionFactory(this);
	this._sequences = [];
	var _g = 0;
	while(_g < files.length) {
		var file = files[_g];
		++_g;
		this.init(file);
	}
};
fabula_Fabula.__name__ = "fabula.Fabula";
fabula_Fabula.prototype = {
	init: function(raw) {
		var elements = fabula_FabulaXmlParser.parse(raw,this);
		this.arrayMerge(this._sequences,elements.sequences);
	}
	,arrayMerge: function(source,adding) {
		var _g = 0;
		var _g1 = adding.length;
		while(_g < _g1) {
			var i = _g++;
			source.push(adding[i]);
		}
	}
	,mapMerge: function(source,adding) {
		var _g = $keyValueIterator(haxe_ds_Map)(adding);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var value = _g1.value;
			haxe_ds_Map.arrayWrite(source,key,value);
		}
	}
	,reset: function() {
		this.completedID.splice(0,this.completedID.length);
		var _g = 0;
		var _g1 = this._sequences;
		while(_g < _g1.length) {
			var seq = _g1[_g];
			++_g;
			if(seq.variables != null) {
				var _g2 = 0;
				var _g3 = seq.variables.length;
				while(_g2 < _g3) {
					var i = _g2++;
					fabula_condition_VariableCollection.getByIndex(seq.variables,i).reset();
				}
			}
			seq.completedID.splice(0,seq.completedID.length);
			var _g4 = 0;
			var _g5 = seq.events;
			while(_g4 < _g5.length) {
				var event = _g5[_g4];
				++_g4;
				event.count = 0;
				if(event.choices != null) {
					var _g6 = 0;
					var _g7 = event.choices;
					while(_g6 < _g7.length) {
						var choice = _g7[_g6];
						++_g6;
						choice.count = 0;
					}
				}
			}
		}
	}
	,selectSequence: function(id,start) {
		if(start == null) {
			start = true;
		}
		var _g = 0;
		var _g1 = this._sequences.length;
		while(_g < _g1) {
			var i = _g++;
			if(this._sequences[i].id == id) {
				var seq = this._sequences[i];
				if(start) {
					if(seq.conditions == null || seq.conditions.test()) {
						this.currentSequence = seq;
						this.currentSequence.start();
					} else {
						return null;
					}
				}
				return seq;
			}
		}
		return null;
	}
	,getNextEvent: function() {
		var nextEvent = this.currentSequence.getNextEvent();
		if(nextEvent != null) {
			nextEvent.count++;
			this.completedID.push(nextEvent.id);
			this.currentSequence.completedID.push(nextEvent.id);
			if(this._completedCallback != null) {
				this._completedCallback(nextEvent.id);
			}
		}
		return nextEvent;
	}
	,getCurrentEvent: function() {
		return this.currentSequence.getEvent();
	}
	,selectChoice: function(id,index) {
		var choice = null;
		if(this.currentSequence != null && this.currentSequence.current < this.currentSequence.events.length) {
			choice = this.currentSequence.getEvent().selectChoice(id,index);
			if(choice.variables != null) {
				var key = choice.variables.keys();
				while(key.hasNext()) {
					var key1 = key.next();
					var _vari = this.getVar(key1);
					if(_vari != null) {
						_vari.set(choice.variables.get(key1));
					}
				}
			}
			this.currentSequence.nextTarget = choice.isExit ? "$$EXIT$$" : choice.target;
		}
		if(choice != null) {
			this.completedID.push(id);
			this.currentSequence.completedID.push(id);
			if(this._completedCallback != null) {
				this._completedCallback(id);
			}
		}
		return choice;
	}
	,addVariable: function(id,type,startingValue) {
		if(this.variables == null) {
			this.variables = fabula_condition_VariableCollection._new();
		}
		switch(type._hx_index) {
		case 0:
			this.variables.push(new fabula_condition_VariableString(id,startingValue));
			break;
		case 1:
			this.variables.push(new fabula_condition_VariableInt(id,startingValue));
			break;
		case 2:
			this.variables.push(new fabula_condition_VariableFloat(id,startingValue));
			break;
		case 3:
			this.variables.push(new fabula_condition_VariableBool(id,startingValue));
			break;
		case 4:
			this.variables.push(new fabula_condition_VariableEnum(id,startingValue));
			break;
		case 5:
			this.variables.push(new fabula_condition_VariableCycle(id,startingValue));
			break;
		}
	}
	,getVar: function(name) {
		var out = null;
		if(this.currentSequence != null) {
			if(this.currentSequence.variables != null) {
				out = fabula_condition_VariableCollection.get(this.currentSequence.variables,name);
				if(out != null) {
					return out;
				}
			}
		}
		if(out == null && this.variables != null) {
			out = fabula_condition_VariableCollection.get(this.variables,name);
		}
		return out;
	}
	,isIDCompleted: function(id) {
		if(id.charAt(0) == ".") {
			return this.currentSequence.completedID.indexOf(id.substring(1)) != -1;
		} else {
			return this.completedID.indexOf(id) != -1;
		}
	}
	,countWords: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this._sequences;
		while(_g < _g1.length) {
			var seq = _g1[_g];
			++_g;
			if(seq.events != null) {
				var _g2 = 0;
				var _g3 = seq.events;
				while(_g2 < _g3.length) {
					var event = _g3[_g2];
					++_g2;
					count += event.text.split(" ").length;
					if(event.choices != null) {
						var _g4 = 0;
						var _g5 = event.choices;
						while(_g4 < _g5.length) {
							var choice = _g5[_g4];
							++_g4;
							count += choice.text.split(" ").length;
						}
					}
				}
			}
		}
		return count;
	}
	,__class__: fabula_Fabula
};
var fabula_FabulaXmlParser = function() { };
fabula_FabulaXmlParser.__name__ = "fabula.FabulaXmlParser";
fabula_FabulaXmlParser.parse = function(raw,fabula) {
	fabula_FabulaXmlParser._conditionFactory = fabula.conditionFactory;
	fabula_FabulaXmlParser._xml = haxe_xml_Access._new(Xml.parse(raw).firstElement());
	var _g = 0;
	var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml_Access.get_nodes(fabula_FabulaXmlParser._xml),"variable");
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		fabula.addVariable(haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(key),"id"),Type.createEnum(fabula_condition_EVariableType,haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(key),"type").toUpperCase()),haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(key),"value"));
	}
	var sequences = [];
	var _g = 0;
	var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml_Access.get_nodes(fabula_FabulaXmlParser._xml),"sequence");
	while(_g < _g1.length) {
		var sequence = _g1[_g];
		++_g;
		if(!haxe_xml__$Access_HasAttribAccess.resolve(haxe_xml_Access.get_has(sequence),"id")) {
			console.log("fabula/FabulaXmlParser.hx:37:","id attribute is mandatory in the sequence tag");
			continue;
		}
		var seqName = haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(sequence),"id");
		fabula_FabulaXmlParser.ID_GEN_HELPER = seqName;
		fabula_FabulaXmlParser.ID_GEN_COUNT = 0;
		var events = [];
		var branches = [];
		var seq = new fabula_Sequence(seqName);
		seq.addConditions(fabula_FabulaXmlParser._conditionFactory.create(kadabra_utils_XMLUtils.getString(sequence,"if")));
		var event = fabula_FabulaXmlParser.parseEvents(sequence,seq,events,branches);
		if(event != null) {
			console.log("fabula/FabulaXmlParser.hx:54:",event.id);
			if(event.choices != null) {
				var _g2 = 0;
				var _g3 = event.choices;
				while(_g2 < _g3.length) {
					var choice = _g3[_g2];
					++_g2;
					if(choice.target == null) {
						choice.isExit = true;
					}
				}
			} else {
				event.isExit = true;
			}
		}
		seq.addSequence(events,branches);
		sequences.push(seq);
	}
	if(haxe_xml__$Access_HasNodeAccess.resolve(haxe_xml_Access.get_hasNode(fabula_FabulaXmlParser._xml),"words")) {
		var word = haxe_xml_Access.get_elements(haxe_xml__$Access_NodeListAccess.resolve(haxe_xml_Access.get_nodes(fabula_FabulaXmlParser._xml),"words")[0]);
		while(word.hasNext()) {
			var word1 = word.next();
			switch(haxe_xml_Access.get_name(word1).toUpperCase()) {
			case "CONTINUE":
				fabula_Fabula.CONTINUE = haxe_xml_Access.get_innerData(word1);
				break;
			case "QUIT":
				fabula_Fabula.QUIT = haxe_xml_Access.get_innerData(word1);
				break;
			}
		}
	}
	var _g = 0;
	var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml_Access.get_nodes(fabula_FabulaXmlParser._xml),"list");
	while(_g < _g1.length) {
		var list = _g1[_g];
		++_g;
		console.log("fabula/FabulaXmlParser.hx:91:","coucou list");
	}
	return { sequences : sequences};
};
fabula_FabulaXmlParser.parseEvents = function(sequence,seq,events,branches,parent) {
	var event = null;
	var key = haxe_xml_Access.get_elements(sequence);
	_hx_loop1: while(key.hasNext()) {
		var key1 = key.next();
		switch(haxe_xml_Access.get_name(key1)) {
		case "choice":
			if(event == null) {
				console.log("fabula/FabulaXmlParser.hx:163:","impossible to add a choice without a parent event");
				break _hx_loop1;
			}
			var _choice = new fabula_Choice(kadabra_utils_XMLUtils.getString(key1,"id",fabula_FabulaXmlParser.ID_GEN_HELPER + "_C" + ++fabula_FabulaXmlParser.ID_GEN_COUNT),fabula_FabulaXmlParser.getText(key1),kadabra_utils_XMLUtils.getString(key1,"type"),fabula_FabulaXmlParser._conditionFactory.create(kadabra_utils_XMLUtils.getString(key1,"if")),kadabra_utils_XMLUtils.getString(key1,"target"),kadabra_utils_XMLUtils.getBool(key1,"exit",event.isExit),kadabra_utils_XMLUtils.getInt(key1,"limit"));
			if(haxe_xml__$Access_HasNodeAccess.resolve(haxe_xml_Access.get_hasNode(key1),"variable")) {
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml_Access.get_nodes(key1),"variable");
				while(_g < _g1.length) {
					var vari = _g1[_g];
					++_g;
					_choice.addVariable(haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(vari),"id"),haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(vari),"value"));
				}
			}
			event.addChoice(_choice);
			break;
		case "event":
			var _id = kadabra_utils_XMLUtils.getString(key1,"id",fabula_FabulaXmlParser.ID_GEN_HELPER + "_E" + ++fabula_FabulaXmlParser.ID_GEN_COUNT);
			var _if;
			if(parent == null) {
				_if = kadabra_utils_XMLUtils.getString(key1,"if");
			} else {
				_if = parent.id;
				parent.target = _id;
			}
			event = new fabula_Event(_id,fabula_FabulaXmlParser.getText(key1),fabula_FabulaXmlParser._conditionFactory.create(_if),kadabra_utils_XMLUtils.getBool(key1,"exit",false),kadabra_utils_XMLUtils.getInt(key1,"weight",1),kadabra_utils_XMLUtils.getInt(key1,"limit"),kadabra_utils_XMLUtils.getString(key1,"speaker"),kadabra_utils_XMLUtils.getString(key1,"listeners"),kadabra_utils_XMLUtils.getString(key1,"environment"),kadabra_utils_XMLUtils.getString(key1,"target"));
			if(haxe_xml__$Access_HasNodeAccess.resolve(haxe_xml_Access.get_hasNode(key1),"choice")) {
				var _g2 = 0;
				var _g3 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml_Access.get_nodes(key1),"choice");
				while(_g2 < _g3.length) {
					var choice = _g3[_g2];
					++_g2;
					var _choice1 = new fabula_Choice(kadabra_utils_XMLUtils.getString(choice,"id",fabula_FabulaXmlParser.ID_GEN_HELPER + "_C" + ++fabula_FabulaXmlParser.ID_GEN_COUNT),fabula_FabulaXmlParser.getText(choice),kadabra_utils_XMLUtils.getString(choice,"type"),fabula_FabulaXmlParser._conditionFactory.create(kadabra_utils_XMLUtils.getString(choice,"if")),kadabra_utils_XMLUtils.getString(choice,"target"),kadabra_utils_XMLUtils.getBool(choice,"exit",event.isExit),kadabra_utils_XMLUtils.getInt(choice,"limit"));
					if(haxe_xml__$Access_HasNodeAccess.resolve(haxe_xml_Access.get_hasNode(choice),"variable")) {
						var _g4 = 0;
						var _g5 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml_Access.get_nodes(choice),"variable");
						while(_g4 < _g5.length) {
							var vari1 = _g5[_g4];
							++_g4;
							_choice1.addVariable(haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(vari1),"id"),haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(vari1),"value"));
						}
					}
					event.addChoice(_choice1);
					if(haxe_xml__$Access_HasNodeAccess.resolve(haxe_xml_Access.get_hasNode(choice),"event")) {
						fabula_FabulaXmlParser.parseEvents(choice,seq,events,branches,_choice1);
					}
				}
			}
			if(parent == null) {
				events.push(event);
			} else {
				branches.push(event);
			}
			break;
		case "variable":
			if(haxe_xml_Access.get_name(sequence) == "sequence") {
				seq.addVariable(haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(key1),"id"),Type.createEnum(fabula_condition_EVariableType,haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(key1),"type").toUpperCase()),haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(key1),"value"));
			}
			break;
		}
	}
	return event;
};
fabula_FabulaXmlParser.getText = function(element) {
	var text = kadabra_utils_XMLUtils.getString(element,"text");
	if(text == "" && haxe_xml__$Access_HasNodeAccess.resolve(haxe_xml_Access.get_hasNode(element),"text")) {
		text = haxe_xml_Access.get_innerData(haxe_xml__$Access_NodeAccess.resolve(haxe_xml_Access.get_node(element),"text"));
	}
	return text;
};
var fabula_Reward = function(type,value,target) {
	this.type = type;
	this.value = value;
	this.target = target;
};
fabula_Reward.__name__ = "fabula.Reward";
fabula_Reward.prototype = {
	__class__: fabula_Reward
};
var fabula_Sequence = function(id) {
	this.id = id;
	this.current = -1;
	this.currentId = null;
	this.numCompleted = 0;
	this.nextTarget = null;
	this.completedID = [];
};
fabula_Sequence.__name__ = "fabula.Sequence";
fabula_Sequence.prototype = {
	addConditions: function(conditions) {
		this.conditions = conditions;
	}
	,addVariable: function(id,type,startingValue) {
		if(this.variables == null) {
			this.variables = fabula_condition_VariableCollection._new();
		}
		switch(type._hx_index) {
		case 0:
			this.variables.push(new fabula_condition_VariableString(id,startingValue));
			break;
		case 1:
			this.variables.push(new fabula_condition_VariableInt(id,startingValue));
			break;
		case 2:
			this.variables.push(new fabula_condition_VariableFloat(id,startingValue));
			break;
		case 3:
			this.variables.push(new fabula_condition_VariableBool(id,startingValue));
			break;
		case 4:
			this.variables.push(new fabula_condition_VariableEnum(id,startingValue));
			break;
		case 5:
			this.variables.push(new fabula_condition_VariableCycle(id,startingValue));
			break;
		}
	}
	,addSequence: function(events,branches) {
		if(this.events != null || this.branches != null) {
			console.log("fabula/Sequence.hx:74:","WARNING a new sequence will replace an old sequence");
		}
		this.events = events;
		this.branches = branches;
	}
	,start: function() {
		this.current = -1;
		this.nextTarget = null;
		this.currentId = null;
		if(this.variables != null) {
			var _g = 0;
			var _g1 = this.variables.length;
			while(_g < _g1) {
				var i = _g++;
				fabula_condition_VariableCollection.getByIndex(this.variables,i).reset();
			}
		}
		this.completedID.splice(0,this.completedID.length);
	}
	,getNextEvent: function(ignoreExit) {
		if(ignoreExit == null) {
			ignoreExit = false;
		}
		if(!ignoreExit && this.current > -1 && this.current < this.events.length) {
			if(this.events[this.current].isExit || this.nextTarget == "$$EXIT$$") {
				this.numCompleted++;
				console.log("fabula/Sequence.hx:108:","[Fabula] sequence " + this.id + " completed");
				return null;
			}
		}
		if(this.current + 1 <= this.events.length) {
			if(this.current >= 0) {
				if(this.nextTarget != null && this.nextTarget != "") {
					var target = this.nextTarget;
					this.nextTarget = null;
					return this.getEvent(target);
				} else if(this.events[this.current].target != null && this.events[this.current].target != "") {
					return this.getEvent(this.events[this.current].target);
				}
			}
			this.current++;
			if(this.current < this.events.length) {
				var nextEvent = this.events[this.current];
				if(nextEvent.testConditions()) {
					this.currentId = nextEvent.id;
					return nextEvent;
				} else {
					return this.getNextEvent(true);
				}
			} else {
				this.numCompleted++;
				console.log("fabula/Sequence.hx:142:","sequence completed");
			}
		}
		return null;
	}
	,getEvent: function(id) {
		if(id == null) {
			id = this.currentId;
		}
		var _g = 0;
		var _g1 = this.events.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.events[i].id == id) {
				this.current = i;
				this.currentId = id;
				return this.events[i];
			}
		}
		var _g = 0;
		var _g1 = this.branches.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.branches[i].id == id) {
				this.currentId = id;
				return this.branches[i];
			}
		}
		return null;
	}
	,__class__: fabula_Sequence
};
var fabula_condition_Condition = function(condition,type,affirmation) {
	if(affirmation == null) {
		affirmation = true;
	}
	this.condition = condition;
	this.type = type;
	this._affirmation = affirmation;
};
fabula_condition_Condition.__name__ = "fabula.condition.Condition";
fabula_condition_Condition.prototype = {
	test: function() {
		throw haxe_Exception.thrown("[Condition] Override test function");
	}
	,__class__: fabula_condition_Condition
};
var fabula_condition_ConditionCollection = function() {
	this.condition = [];
	fabula_condition_Condition.call(this,this.condition,null);
};
fabula_condition_ConditionCollection.__name__ = "fabula.condition.ConditionCollection";
fabula_condition_ConditionCollection.__super__ = fabula_condition_Condition;
fabula_condition_ConditionCollection.prototype = $extend(fabula_condition_Condition.prototype,{
	add: function(element) {
		this.condition.push(element);
	}
	,test: function() {
		var _g = 0;
		var _g1 = this.condition;
		while(_g < _g1.length) {
			var cond = _g1[_g];
			++_g;
			if(!cond.test()) {
				return false;
			}
		}
		return true;
	}
	,hasType: function(type) {
		var _g = 0;
		var _g1 = this.condition;
		while(_g < _g1.length) {
			var cond = _g1[_g];
			++_g;
			if(cond.type == type) {
				return true;
			}
		}
		return false;
	}
	,hasOnlyTypes: function(types) {
		var _g = 0;
		var _g1 = this.condition;
		while(_g < _g1.length) {
			var cond = _g1[_g];
			++_g;
			if(cond.type == null) {
				var cc = cond;
				if(!cc.hasOnlyTypes(types)) {
					return false;
				}
			} else if(types.indexOf(cond.type) == -1) {
				return false;
			}
		}
		return true;
	}
	,__class__: fabula_condition_ConditionCollection
});
var fabula_condition_ConditionEvent = function(condition,isCompleted,affirmation) {
	if(affirmation == null) {
		affirmation = true;
	}
	this._isCompleted = isCompleted;
	fabula_condition_Condition.call(this,condition,fabula_condition_EConditionType.EVENT,affirmation);
};
fabula_condition_ConditionEvent.__name__ = "fabula.condition.ConditionEvent";
fabula_condition_ConditionEvent.__super__ = fabula_condition_Condition;
fabula_condition_ConditionEvent.prototype = $extend(fabula_condition_Condition.prototype,{
	test: function() {
		if(this._isCompleted(this.condition)) {
			return this._affirmation;
		}
		return !this._affirmation;
	}
	,__class__: fabula_condition_ConditionEvent
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.prototype = {
	exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$StringMap_StringMapKeyValueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var fabula_condition_ConditionFactory = function(fabula) {
	this.fabula = fabula;
};
fabula_condition_ConditionFactory.__name__ = "fabula.condition.ConditionFactory";
fabula_condition_ConditionFactory.prototype = {
	create: function(raw) {
		var values;
		var subValues;
		if(raw != "") {
			var collection = new fabula_condition_ConditionCollection();
			if(raw.indexOf(",") != -1) {
				values = raw.split(",");
			} else {
				values = raw.split("&");
			}
			var _g = 0;
			while(_g < values.length) {
				var value = values[_g];
				++_g;
				if(value.indexOf("|") != -1) {
					var or = new fabula_condition_ConditionOr();
					subValues = value.split("|");
					var _g1 = 0;
					while(_g1 < subValues.length) {
						var subValue = subValues[_g1];
						++_g1;
						this.addToCollection(or,subValue);
					}
					collection.add(or);
				} else {
					this.addToCollection(collection,value);
				}
			}
			return collection;
		}
		return null;
	}
	,addToCollection: function(collection,value) {
		var negation = value.indexOf("!") == 0;
		if(negation) {
			value = HxOverrides.substr(value,1,null);
		}
		var hasMatch = fabula_condition_ConditionFactory.regexp.match(value);
		var match = null;
		var operation = null;
		if(hasMatch) {
			value = fabula_condition_ConditionFactory.regexp.matched(1);
			operation = fabula_condition_ConditionFactory.regexp.matched(2);
			match = fabula_condition_ConditionFactory.regexp.matched(3);
		}
		if(match == "" || match == null) {
			operation = "=";
			match = true;
		} else if(operation == "(in:") {
			operation = "in";
			var temp = value;
			value = match;
			match = temp;
		}
		if(fabula_condition_ConditionFactory.helperList.exists(value)) {
			var _g = fabula_condition_ConditionFactory.helperList.get(value);
			if(_g == null) {
				throw haxe_Exception.thrown("[Fabula > Condition] To use other condition type, please override ConditionFactory class and create a Condition class for this type");
			} else {
				switch(_g._hx_index) {
				case 0:
					collection.add(new fabula_condition_ConditionEvent(value,($_=this.fabula,$bind($_,$_.isIDCompleted)),!negation));
					break;
				case 1:
					collection.add(new fabula_condition_ConditionVariable(value,fabula_condition_EConditionOp.fromString(operation),match,($_=this.fabula,$bind($_,$_.getVar)),!negation));
					break;
				default:
					throw haxe_Exception.thrown("[Fabula > Condition] To use other condition type, please override ConditionFactory class and create a Condition class for this type");
				}
			}
		} else {
			collection.add(new fabula_condition_ConditionEvent(value,($_=this.fabula,$bind($_,$_.isIDCompleted)),!negation));
		}
	}
	,__class__: fabula_condition_ConditionFactory
};
var fabula_condition_ConditionOr = function() {
	fabula_condition_ConditionCollection.call(this);
};
fabula_condition_ConditionOr.__name__ = "fabula.condition.ConditionOr";
fabula_condition_ConditionOr.__super__ = fabula_condition_ConditionCollection;
fabula_condition_ConditionOr.prototype = $extend(fabula_condition_ConditionCollection.prototype,{
	test: function() {
		var _g = 0;
		var _g1 = this.condition;
		while(_g < _g1.length) {
			var cond = _g1[_g];
			++_g;
			if(cond.test()) {
				return true;
			}
		}
		return false;
	}
	,__class__: fabula_condition_ConditionOr
});
var fabula_condition_ConditionVariable = function(name,operation,match,getVar,affirmation) {
	if(affirmation == null) {
		affirmation = true;
	}
	fabula_condition_Condition.call(this,name,fabula_condition_EConditionType.VARIABLE,affirmation);
	this._getVar = getVar;
	this._operation = operation;
	this._targetValue = match;
};
fabula_condition_ConditionVariable.__name__ = "fabula.condition.ConditionVariable";
fabula_condition_ConditionVariable.__super__ = fabula_condition_Condition;
fabula_condition_ConditionVariable.prototype = $extend(fabula_condition_Condition.prototype,{
	test: function() {
		var vari = this._getVar(this.condition);
		return vari.compare(this._operation,this._targetValue) == this._affirmation;
	}
	,__class__: fabula_condition_ConditionVariable
});
var fabula_condition_EConditionOp = {};
fabula_condition_EConditionOp.fromString = function(s) {
	switch(s) {
	case "!=":
		return "!=";
	case "<":
		return "<";
	case "<=":
		return "<=";
	case "=":
		return "=";
	case ">":
		return ">";
	case ">=":
		return ">=";
	case "in":
		return "in";
	default:
		return null;
	}
};
var fabula_condition_EConditionType = $hxEnums["fabula.condition.EConditionType"] = { __ename__:true,__constructs__:null
	,EVENT: {_hx_name:"EVENT",_hx_index:0,__enum__:"fabula.condition.EConditionType",toString:$estr}
	,VARIABLE: {_hx_name:"VARIABLE",_hx_index:1,__enum__:"fabula.condition.EConditionType",toString:$estr}
	,INVENTORY: {_hx_name:"INVENTORY",_hx_index:2,__enum__:"fabula.condition.EConditionType",toString:$estr}
	,HAS_CHARACTER: {_hx_name:"HAS_CHARACTER",_hx_index:3,__enum__:"fabula.condition.EConditionType",toString:$estr}
	,IS_CHARACTER: {_hx_name:"IS_CHARACTER",_hx_index:4,__enum__:"fabula.condition.EConditionType",toString:$estr}
	,TRAIT: {_hx_name:"TRAIT",_hx_index:5,__enum__:"fabula.condition.EConditionType",toString:$estr}
	,ATTRIBUTS: {_hx_name:"ATTRIBUTS",_hx_index:6,__enum__:"fabula.condition.EConditionType",toString:$estr}
	,SKILLS: {_hx_name:"SKILLS",_hx_index:7,__enum__:"fabula.condition.EConditionType",toString:$estr}
	,CUSTOM: ($_=function(type) { return {_hx_index:8,type:type,__enum__:"fabula.condition.EConditionType",toString:$estr}; },$_._hx_name="CUSTOM",$_.__params__ = ["type"],$_)
};
fabula_condition_EConditionType.__constructs__ = [fabula_condition_EConditionType.EVENT,fabula_condition_EConditionType.VARIABLE,fabula_condition_EConditionType.INVENTORY,fabula_condition_EConditionType.HAS_CHARACTER,fabula_condition_EConditionType.IS_CHARACTER,fabula_condition_EConditionType.TRAIT,fabula_condition_EConditionType.ATTRIBUTS,fabula_condition_EConditionType.SKILLS,fabula_condition_EConditionType.CUSTOM];
var fabula_condition_EVariableType = $hxEnums["fabula.condition.EVariableType"] = { __ename__:true,__constructs__:null
	,STRING: {_hx_name:"STRING",_hx_index:0,__enum__:"fabula.condition.EVariableType",toString:$estr}
	,INT: {_hx_name:"INT",_hx_index:1,__enum__:"fabula.condition.EVariableType",toString:$estr}
	,FLOAT: {_hx_name:"FLOAT",_hx_index:2,__enum__:"fabula.condition.EVariableType",toString:$estr}
	,BOOL: {_hx_name:"BOOL",_hx_index:3,__enum__:"fabula.condition.EVariableType",toString:$estr}
	,ENUM: {_hx_name:"ENUM",_hx_index:4,__enum__:"fabula.condition.EVariableType",toString:$estr}
	,CYCLE: {_hx_name:"CYCLE",_hx_index:5,__enum__:"fabula.condition.EVariableType",toString:$estr}
};
fabula_condition_EVariableType.__constructs__ = [fabula_condition_EVariableType.STRING,fabula_condition_EVariableType.INT,fabula_condition_EVariableType.FLOAT,fabula_condition_EVariableType.BOOL,fabula_condition_EVariableType.ENUM,fabula_condition_EVariableType.CYCLE];
var fabula_condition_Variable = function(id,type,startingValue) {
	this.id = id;
	this.type = type;
	this.set(startingValue);
	this.startingValue = this.value;
	fabula_condition_ConditionFactory.helperList.set(this.id,fabula_condition_EConditionType.VARIABLE);
};
fabula_condition_Variable.__name__ = "fabula.condition.Variable";
fabula_condition_Variable.prototype = {
	set: function(value) {
		throw haxe_Exception.thrown("[Fabula > variable] This method needs to be overriden");
	}
	,convert: function(value) {
		throw haxe_Exception.thrown("[Fabula > variable] This method needs to be overriden");
	}
	,compare: function(operation,targetValue) {
		switch(operation) {
		case "!=":
			return this.value != targetValue;
		case "=":
			return this.value == targetValue;
		default:
			return false;
		}
	}
	,reset: function() {
		this.value = this.startingValue;
	}
	,toString: function() {
		return "[var " + this.id + " : v:" + Std.string(this.value) + ", d:" + Std.string(this.startingValue) + "]";
	}
	,__class__: fabula_condition_Variable
};
var fabula_condition_VariableBool = function(id,startingValue) {
	fabula_condition_Variable.call(this,id,fabula_condition_EVariableType.BOOL,startingValue);
};
fabula_condition_VariableBool.__name__ = "fabula.condition.VariableBool";
fabula_condition_VariableBool.__super__ = fabula_condition_Variable;
fabula_condition_VariableBool.prototype = $extend(fabula_condition_Variable.prototype,{
	set: function(value) {
		var temp = this.value;
		this.value = value == "true" || value == "1";
		if(temp != this.value) {
			return true;
		}
		return false;
	}
	,convert: function(value) {
		if(value != "true") {
			return value == "1";
		} else {
			return true;
		}
	}
	,__class__: fabula_condition_VariableBool
});
var fabula_condition_VariableCollection = {};
fabula_condition_VariableCollection._new = function() {
	var this1 = [];
	return this1;
};
fabula_condition_VariableCollection.getByIndex = function(this1,index) {
	return this1[index];
};
fabula_condition_VariableCollection.get = function(this1,id) {
	var _g = 0;
	while(_g < this1.length) {
		var vari = this1[_g];
		++_g;
		if(vari.id == id) {
			return vari;
		}
	}
	return null;
};
var fabula_condition_VariableEnum = function(id,startingValue) {
	this.options = startingValue.split(",");
	fabula_condition_Variable.call(this,id,fabula_condition_EVariableType.ENUM,startingValue);
};
fabula_condition_VariableEnum.__name__ = "fabula.condition.VariableEnum";
fabula_condition_VariableEnum.__super__ = fabula_condition_Variable;
fabula_condition_VariableEnum.prototype = $extend(fabula_condition_Variable.prototype,{
	set: function(value) {
		var temp = this.value;
		var index = Std.parseInt(value);
		if(index == null) {
			if(value == this.options.toString()) {
				value = this.options[0];
			}
			if(value == "+") {
				var index1 = this.options.indexOf(this.value) + 1;
				if(index1 < this.options.length) {
					value = this.options[index1];
				} else {
					return false;
				}
			} else if(value == "-") {
				var index1 = this.options.indexOf(this.value) - 1;
				if(index1 >= 0) {
					value = this.options[index1];
				} else {
					return false;
				}
			} else if(this.options.indexOf(value) == -1) {
				console.log("fabula/condition/VariableEnum.hx:51:","[Fabula > Variable] " + value + " not in options of " + this.id);
				return false;
			}
			this.value = value;
		} else {
			if(index >= this.options.length || index < 0) {
				console.log("fabula/condition/VariableEnum.hx:60:","[Fabula > Variable] " + index + " not in length of " + this.id);
				return false;
			}
			this.value = this.options[index];
		}
		if(temp != this.value) {
			return true;
		}
		return false;
	}
	,convert: function(value) {
		return value;
	}
	,__class__: fabula_condition_VariableEnum
});
var fabula_condition_VariableCycle = function(id,startingValue) {
	fabula_condition_VariableEnum.call(this,id,startingValue);
	this.type = fabula_condition_EVariableType.CYCLE;
};
fabula_condition_VariableCycle.__name__ = "fabula.condition.VariableCycle";
fabula_condition_VariableCycle.__super__ = fabula_condition_VariableEnum;
fabula_condition_VariableCycle.prototype = $extend(fabula_condition_VariableEnum.prototype,{
	set: function(value) {
		var temp = this.value;
		var index = Std.parseInt(value);
		if(index == null) {
			if(value == this.options.toString()) {
				value = this.options[0];
			}
			if(value == "+") {
				var index1 = this.options.indexOf(this.value) + 1;
				if(index1 >= this.options.length) {
					index1 = 0;
				}
				value = this.options[index1];
			} else if(value == "-") {
				var index1 = this.options.indexOf(this.value) - 1;
				if(index1 < 0) {
					index1 = this.options.length - 1;
				}
				value = this.options[index1];
			} else if(this.options.indexOf(value) == -1) {
				console.log("fabula/condition/VariableCycle.hx:45:","[Fabula > Variable] " + value + " not in options of " + this.id);
				return false;
			}
			this.value = value;
		} else {
			if(index >= this.options.length) {
				index = this.options.length - 1;
			} else if(index < 0) {
				index = 0;
			}
			this.value = this.options[index];
		}
		if(temp != this.value) {
			return true;
		}
		return false;
	}
	,__class__: fabula_condition_VariableCycle
});
var fabula_condition_VariableFloat = function(id,startingValue) {
	fabula_condition_Variable.call(this,id,fabula_condition_EVariableType.FLOAT,startingValue);
};
fabula_condition_VariableFloat.__name__ = "fabula.condition.VariableFloat";
fabula_condition_VariableFloat.__super__ = fabula_condition_Variable;
fabula_condition_VariableFloat.prototype = $extend(fabula_condition_Variable.prototype,{
	set: function(value) {
		var temp = this.value;
		var _hx_tmp;
		switch(value) {
		case "+":case "++":
			this.value++;
			break;
		case "-":case "--":
			this.value--;
			break;
		default:
			_hx_tmp = this.extract(value);
			var result = _hx_tmp;
			switch(result.operation) {
			case "+":
				this.value += result.subValue;
				break;
			case "-":
				this.value -= result.subValue;
				break;
			default:
				this.value = result.subValue;
			}
		}
		if(temp != this.value) {
			return true;
		}
		return false;
	}
	,extract: function(str) {
		var operation = str.charAt(0);
		var subValue = 0.0;
		if(operation == "+" || operation == "-") {
			subValue = Std.parseFloat(str.substring(1));
		} else {
			subValue = Std.parseFloat(str);
		}
		return { operation : operation, subValue : subValue};
	}
	,convert: function(value) {
		return Std.parseFloat(value);
	}
	,compare: function(operation,targetValue) {
		switch(operation) {
		case "!=":
			return this.value != targetValue;
		case "<":
			return this.value < targetValue;
		case "<=":
			return this.value <= targetValue;
		case "=":
			return this.value == targetValue;
		case ">":
			return this.value > targetValue;
		case ">=":
			return this.value >= targetValue;
		default:
			return false;
		}
	}
	,__class__: fabula_condition_VariableFloat
});
var fabula_condition_VariableInt = function(id,startingValue) {
	fabula_condition_Variable.call(this,id,fabula_condition_EVariableType.INT,startingValue);
};
fabula_condition_VariableInt.__name__ = "fabula.condition.VariableInt";
fabula_condition_VariableInt.__super__ = fabula_condition_Variable;
fabula_condition_VariableInt.prototype = $extend(fabula_condition_Variable.prototype,{
	set: function(value) {
		var temp = this.value;
		var _hx_tmp;
		switch(value) {
		case "+":case "++":
			this.value++;
			break;
		case "-":case "--":
			this.value--;
			break;
		default:
			_hx_tmp = this.extract(value);
			var result = _hx_tmp;
			switch(result.operation) {
			case "+":
				this.value += result.subValue;
				break;
			case "-":
				this.value -= result.subValue;
				break;
			default:
				this.value = result.subValue;
			}
		}
		if(temp != this.value) {
			return true;
		}
		return false;
	}
	,extract: function(str) {
		var operation = str.charAt(0);
		var subValue = 0;
		if(operation == "+" || operation == "-") {
			subValue = Std.parseInt(str.substring(1));
		} else {
			subValue = Std.parseInt(str);
		}
		return { operation : operation, subValue : subValue};
	}
	,convert: function(value) {
		return Std.parseInt(value);
	}
	,compare: function(operation,targetValue) {
		switch(operation) {
		case "!=":
			return this.value != targetValue;
		case "<":
			return this.value < targetValue;
		case "<=":
			return this.value <= targetValue;
		case "=":
			return this.value == targetValue;
		case ">":
			return this.value > targetValue;
		case ">=":
			return this.value >= targetValue;
		default:
			return false;
		}
	}
	,__class__: fabula_condition_VariableInt
});
var fabula_condition_VariableString = function(id,startingValue) {
	fabula_condition_Variable.call(this,id,fabula_condition_EVariableType.STRING,startingValue);
};
fabula_condition_VariableString.__name__ = "fabula.condition.VariableString";
fabula_condition_VariableString.__super__ = fabula_condition_Variable;
fabula_condition_VariableString.prototype = $extend(fabula_condition_Variable.prototype,{
	set: function(value) {
		var temp = this.value;
		this.value = value;
		if(temp != this.value) {
			return true;
		}
		return false;
	}
	,convert: function(value) {
		return value;
	}
	,compare: function(operation,targetValue) {
		switch(operation) {
		case "!=":
			return this.value != targetValue;
		case "=":
			return this.value == targetValue;
		case "in":
			return this.value.indexOf(targetValue) != -1;
		default:
			return false;
		}
	}
	,__class__: fabula_condition_VariableString
});
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__shiftStack: function() {
		this.__skipStack++;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__shiftStack();
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_ds_Map = {};
haxe_ds_Map.set = function(this1,key,value) {
	this1.set(key,value);
};
haxe_ds_Map.get = function(this1,key) {
	return this1.get(key);
};
haxe_ds_Map.exists = function(this1,key) {
	return this1.exists(key);
};
haxe_ds_Map.keys = function(this1) {
	return this1.keys();
};
haxe_ds_Map.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
haxe_ds_Map.arrayWrite = function(this1,k,v) {
	this1.set(k,v);
	return v;
};
haxe_ds_Map.toStringMap = function(t) {
	return new haxe_ds_StringMap();
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapKeyValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyValueIterator.__name__ = "haxe.ds._StringMap.StringMapKeyValueIterator";
haxe_ds__$StringMap_StringMapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		var key = this.keys[this.current++];
		return { key : key, value : this.h[key]};
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyValueIterator
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_StringIteratorUnicode = function(s) {
	this.offset = 0;
	this.s = s;
};
haxe_iterators_StringIteratorUnicode.__name__ = "haxe.iterators.StringIteratorUnicode";
haxe_iterators_StringIteratorUnicode.prototype = {
	hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		var c = StringTools.utf16CodePointAt(this.s,this.offset++);
		if(c >= 65536) {
			this.offset++;
		}
		return c;
	}
	,__class__: haxe_iterators_StringIteratorUnicode
};
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname = this1.nodeType == Xml.Document ? "Document" : this1.get_nodeName();
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	return haxe_xml_Access._new(x);
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		throw haxe_Exception.thrown(this1.get_nodeName() + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasAttribAccess = {};
haxe_xml__$Access_HasAttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	return this1.exists(name);
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml__$Access_NodeListAccess = {};
haxe_xml__$Access_NodeListAccess.resolve = function(this1,name) {
	var l = [];
	var x = this1.elementsNamed(name);
	while(x.hasNext()) {
		var x1 = x.next();
		l.push(haxe_xml_Access._new(x1));
	}
	return l;
};
var haxe_xml_Access = {};
haxe_xml_Access.get_x = function(this1) {
	return this1;
};
haxe_xml_Access.get_name = function(this1) {
	if(this1.nodeType == Xml.Document) {
		return "Document";
	} else {
		return this1.get_nodeName();
	}
};
haxe_xml_Access.get_node = function(this1) {
	return haxe_xml_Access.get_x(this1);
};
haxe_xml_Access.get_nodes = function(this1) {
	return this1;
};
haxe_xml_Access.get_att = function(this1) {
	return this1;
};
haxe_xml_Access.get_has = function(this1) {
	return this1;
};
haxe_xml_Access.get_hasNode = function(this1) {
	return haxe_xml_Access.get_x(this1);
};
haxe_xml_Access.get_elements = function(this1) {
	return this1.elements();
};
haxe_xml_Access._new = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	var this1 = x;
	return this1;
};
haxe_xml_Access.get_innerData = function(this1) {
	var it = this1.iterator();
	if(!it.hasNext()) {
		throw haxe_Exception.thrown(haxe_xml_Access.get_name(this1) + " does not have data");
	}
	var v = it.next();
	if(it.hasNext()) {
		var n = it.next();
		if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData && StringTools.trim(v.get_nodeValue()) == "") {
			if(!it.hasNext()) {
				return n.get_nodeValue();
			}
			var n2 = it.next();
			if(n2.nodeType == Xml.PCData && StringTools.trim(n2.get_nodeValue()) == "" && !it.hasNext()) {
				return n.get_nodeValue();
			}
		}
		throw haxe_Exception.thrown(haxe_xml_Access.get_name(this1) + " does not only have data");
	}
	if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) {
		throw haxe_Exception.thrown(haxe_xml_Access.get_name(this1) + " does not have data");
	}
	return v.get_nodeValue();
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = StringTools.fastCodeAt(xml,i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		return Type.getClassName(Type.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = StringTools.unsafeCodeAt(str,p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(StringTools.fastCodeAt(str,p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(StringTools.fastCodeAt(str,p + 1) == 68 || StringTools.fastCodeAt(str,p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(StringTools.fastCodeAt(str,p + 1) != 45 || StringTools.fastCodeAt(str,p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!haxe_xml_Parser.isValidChar(c)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!haxe_xml_Parser.isValidChar(c)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val = buf.toString();
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val1 = buf.toString();
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!haxe_xml_Parser.isValidChar(c)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(v != parent.get_nodeName()) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.get_nodeName() + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				buf.addSub(str,start,p - start);
				var child = Xml.createPCData(buf.toString());
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && StringTools.fastCodeAt(str,p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && StringTools.fastCodeAt(str,p + 1) == 45 && StringTools.fastCodeAt(str,p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && StringTools.fastCodeAt(str,p + 1) == 93 && StringTools.fastCodeAt(str,p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(StringTools.fastCodeAt(s,0) == 35) {
					var c1 = StringTools.fastCodeAt(s,1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.addChar(c1);
				} else if(!haxe_xml_Parser.escapes.exists(s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.add("&" + s + ";");
				} else {
					buf.add(haxe_xml_Parser.escapes.get(s));
				}
				start = p + 1;
				state = escapeNext;
			} else if(!haxe_xml_Parser.isValidChar(c) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.addChar(38);
				buf.addSub(str,start,p - start);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.get_nodeName() + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			buf.addSub(str,start,p - start);
			parent.addChild(Xml.createPCData(buf.toString()));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.addChar(38);
		buf.addSub(str,start,p - start);
		parent.addChild(Xml.createPCData(buf.toString()));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
haxe_xml_Parser.isValidChar = function(c) {
	if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95)) {
		return c == 45;
	} else {
		return true;
	}
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.toString();
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.write(tabs + "<");
			this.write(value.get_nodeName());
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.write(" " + attribute1 + "=\"");
				this.write(StringTools.htmlEscape(value.get(attribute1),true));
				this.write("\"");
			}
			if(this.hasChildren(value)) {
				this.write(">");
				this.newline();
				var child = value.iterator();
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.write(tabs + "</");
				this.write(value.get_nodeName());
				this.write(">");
				this.newline();
			} else {
				this.write("/>");
				this.newline();
			}
			break;
		case 1:
			var nodeValue = value.get_nodeValue();
			if(nodeValue.length != 0) {
				this.write(tabs + StringTools.htmlEscape(nodeValue));
				this.newline();
			}
			break;
		case 2:
			this.write(tabs + "<![CDATA[");
			this.write(value.get_nodeValue());
			this.write("]]>");
			this.newline();
			break;
		case 3:
			var commentContent = value.get_nodeValue();
			commentContent = new EReg("[\n\r\t]+","g").replace(commentContent,"");
			commentContent = "<!--" + commentContent + "-->";
			this.write(tabs);
			this.write(StringTools.trim(commentContent));
			this.newline();
			break;
		case 4:
			this.write("<!DOCTYPE " + value.get_nodeValue() + ">");
			this.newline();
			break;
		case 5:
			this.write("<?" + value.get_nodeValue() + "?>");
			this.newline();
			break;
		case 6:
			var child = value.iterator();
			while(child.hasNext()) {
				var child1 = child.next();
				this.writeNode(child1,tabs);
			}
			break;
		}
	}
	,write: function(input) {
		this.output.add(input);
	}
	,newline: function() {
		if(this.pretty) {
			this.output.add("\n");
		}
	}
	,hasChildren: function(value) {
		var child = value.iterator();
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(StringTools.ltrim(child1.get_nodeValue()).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (js_Boot.isClass(o) || js_Boot.isEnum(o))) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Lib = function() { };
js_Lib.__name__ = "js.Lib";
js_Lib.get_undefined = function() {
	return undefined;
};
var kadabra_utils_XMLUtils = function() { };
kadabra_utils_XMLUtils.__name__ = "kadabra.utils.XMLUtils";
kadabra_utils_XMLUtils.getFloat = function(xml,name,defaultValue) {
	if(defaultValue == null) {
		defaultValue = 0.0;
	}
	if(haxe_xml__$Access_HasAttribAccess.resolve(haxe_xml_Access.get_has(xml),name)) {
		return Std.parseFloat(haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(xml),name));
	} else {
		return defaultValue;
	}
};
kadabra_utils_XMLUtils.getInt = function(xml,name,defaultValue) {
	if(defaultValue == null) {
		defaultValue = 0;
	}
	if(haxe_xml__$Access_HasAttribAccess.resolve(haxe_xml_Access.get_has(xml),name)) {
		return Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(xml),name));
	} else {
		return defaultValue;
	}
};
kadabra_utils_XMLUtils.getBool = function(xml,name,defaultValue) {
	if(defaultValue == null) {
		defaultValue = true;
	}
	if(haxe_xml__$Access_HasAttribAccess.resolve(haxe_xml_Access.get_has(xml),name)) {
		return haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(xml),name) == "true";
	} else {
		return defaultValue;
	}
};
kadabra_utils_XMLUtils.getString = function(xml,name,defaultValue) {
	if(defaultValue == null) {
		defaultValue = "";
	}
	if(haxe_xml__$Access_HasAttribAccess.resolve(haxe_xml_Access.get_has(xml),name)) {
		return haxe_xml__$Access_AttribAccess.resolve(haxe_xml_Access.get_att(xml),name);
	} else {
		return defaultValue;
	}
};
kadabra_utils_XMLUtils.getFirstChild = function(xml) {
	var child = null;
	var el = haxe_xml_Access.get_elements(xml);
	while(el.hasNext()) {
		var el1 = el.next();
		child = el1;
		break;
	}
	return child;
};
function $keyValueIterator(o) { if( o instanceof Array ) return function() { return HxOverrides.keyValueIter(o); }; return typeof(o.keyValueIterator) == 'function' ? $bind(o,o.keyValueIterator) : o.keyValueIterator; }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
js_Boot.__toStr = ({ }).toString;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
fabula_Fabula.CONTINUE = "Continue";
fabula_Fabula.QUIT = "Quit";
fabula_Sequence.EXIT = "$$EXIT$$";
fabula_condition_ConditionFactory.helperList = new haxe_ds_StringMap();
fabula_condition_ConditionFactory.regexp = new EReg("([a-zA-Z0-9_-]+)(=|!=|>=|<=|<|>|\\(in:)?([a-zA-Z0-9_-]*)","g");
fabula_condition_EConditionOp.GREATER = ">";
fabula_condition_EConditionOp.LOWER = "<";
fabula_condition_EConditionOp.GREATER_EQUAL = ">=";
fabula_condition_EConditionOp.LOWER_EQUAL = "<=";
fabula_condition_EConditionOp.EQUAL = "=";
fabula_condition_EConditionOp.DIFFERENT = "!=";
fabula_condition_EConditionOp.IN = "in";
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.set("lt","<");
	h.set("gt",">");
	h.set("amp","&");
	h.set("quot","\"");
	h.set("apos","'");
	$r = h;
	return $r;
}(this));
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
