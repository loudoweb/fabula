<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace fabula;

use \php\_Boot\HxAnon;
use \haxe\xml\_Access\HasAttribAccess_Impl_;
use \php\Boot;
use \haxe\Exception;
use \haxe\xml\_Access\NodeListAccess_Impl_;
use \fabula\condition\EVariableType;
use \haxe\xml\_Access\AttribAccess_Impl_;
use \haxe\xml\_Access\HasNodeAccess_Impl_;
use \_Xml\XmlType_Impl_;
use \fabula\condition\ConditionFactory;
use \haxe\xml\_Access\NodeAccess_Impl_;
use \haxe\xml\_Access\Access_Impl_;

class FabulaXmlParser {
	/**
	 * @var int
	 */
	static public $ID_GEN_COUNT;
	/**
	 * @var string
	 */
	static public $ID_GEN_HELPER;
	/**
	 * @var ConditionFactory
	 */
	static public $_conditionFactory;
	/**
	 * @var \Xml
	 */
	static public $_xml;

	/**
	 * @param \Xml $element
	 * 
	 * @return string
	 */
	public static function getText ($element) {
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:185: characters 3-40
		$text = (HasAttribAccess_Impl_::resolve($element, "text") ? AttribAccess_Impl_::resolve($element, "text") : "");
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:186: lines 186-189
		if (($text === "") && HasNodeAccess_Impl_::resolve($element, "text")) {
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:188: characters 4-38
			$text = Access_Impl_::get_innerData(NodeAccess_Impl_::resolve($element, "text"));
		}
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:190: characters 3-14
		return $text;
	}

	/**
	 * @param string $raw
	 * @param Fabula $fabula
	 * 
	 * @return object
	 */
	public static function parse ($raw, $fabula) {
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:21: characters 3-46
		FabulaXmlParser::$_conditionFactory = $fabula->conditionFactory;
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:23: characters 10-51
		$x = \Xml::parse($raw)->firstElement();
		if (($x->nodeType !== \Xml::$Document) && ($x->nodeType !== \Xml::$Element)) {
			throw Exception::thrown("Invalid nodeType " . ((($x->nodeType === null ? "null" : XmlType_Impl_::toString($x->nodeType)))??'null'));
		}
		$this1 = $x;
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:23: characters 3-51
		FabulaXmlParser::$_xml = $this1;
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:26: lines 26-29
		$_g = 0;
		$_g1 = NodeListAccess_Impl_::resolve(FabulaXmlParser::$_xml, "variable");
		while ($_g < $_g1->length) {
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:26: characters 8-11
			$key = ($_g1->arr[$_g] ?? null);
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:26: lines 26-29
			++$_g;
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:28: characters 4-109
			$fabula->addVariable(AttribAccess_Impl_::resolve($key, "id"), \Type::createEnum(Boot::getClass(EVariableType::class), \mb_strtoupper(AttribAccess_Impl_::resolve($key, "type"))), AttribAccess_Impl_::resolve($key, "value"));
		}
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:32: characters 3-38
		$sequences = new \Array_hx();
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:33: lines 33-72
		$_g = 0;
		$_g1 = NodeListAccess_Impl_::resolve(FabulaXmlParser::$_xml, "sequence");
		while ($_g < $_g1->length) {
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:33: characters 8-16
			$sequence = ($_g1->arr[$_g] ?? null);
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:33: lines 33-72
			++$_g;
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:35: lines 35-39
			if (!HasAttribAccess_Impl_::resolve($sequence, "id")) {
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:38: characters 5-13
				continue;
			}
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:40: characters 4-34
			$seqName = AttribAccess_Impl_::resolve($sequence, "id");
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:41: characters 4-27
			FabulaXmlParser::$ID_GEN_HELPER = $seqName;
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:42: characters 4-20
			FabulaXmlParser::$ID_GEN_COUNT = 0;
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:44: characters 4-33
			$events = new \Array_hx();
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:45: characters 4-35
			$branches = new \Array_hx();
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:46: characters 4-36
			$seq = new Sequence($seqName);
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:47: characters 4-73
			$seq->addConditions(FabulaXmlParser::$_conditionFactory->create((HasAttribAccess_Impl_::resolve($sequence, "if") ? AttribAccess_Impl_::resolve($sequence, "if") : "")));
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:49: characters 4-61
			$event = FabulaXmlParser::parseEvents($sequence, $seq, $events, $branches);
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:52: lines 52-67
			if ($event !== null) {
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:56: lines 56-66
				if ($event->choices !== null) {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:58: lines 58-62
					$_g2 = 0;
					$_g3 = $event->choices;
					while ($_g2 < $_g3->length) {
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:58: characters 11-17
						$choice = ($_g3->arr[$_g2] ?? null);
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:58: lines 58-62
						++$_g2;
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:60: lines 60-61
						if ($choice->target === null) {
							#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:61: characters 8-28
							$choice->isExit = true;
						}
					}
				} else {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:65: characters 6-25
					$event->isExit = true;
				}
			}
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:70: characters 4-37
			$seq->addSequence($events, $branches);
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:71: characters 4-23
			$sequences->arr[$sequences->length++] = $seq;
		}
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:74: lines 74-86
		if (HasNodeAccess_Impl_::resolve(FabulaXmlParser::$_xml, "words")) {
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:76: characters 17-45
			$word = (NodeListAccess_Impl_::resolve(FabulaXmlParser::$_xml, "words")->arr[0] ?? null)->elements();
			while ($word->hasNext()) {
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:76: lines 76-85
				$word1 = $word->next();
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:78: characters 13-36
				$_this = null;
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:78: characters 13-22
				if ($word1->nodeType === \Xml::$Document) {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:78: characters 13-36
					$_this = "Document";
				} else {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:78: characters 13-22
					if ($word1->nodeType !== \Xml::$Element) {
						throw Exception::thrown("Bad node type, expected Element but found " . ((($word1->nodeType === null ? "null" : XmlType_Impl_::toString($word1->nodeType)))??'null'));
					}
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:78: characters 13-36
					$_this = $word1->nodeName;
				}
				$__hx__switch = (\mb_strtoupper($_this));
				if ($__hx__switch === "CONTINUE") {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:81: characters 7-39
					Fabula::$CONTINUE = Access_Impl_::get_innerData($word1);
				} else if ($__hx__switch === "QUIT") {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:83: characters 7-35
					Fabula::$QUIT = Access_Impl_::get_innerData($word1);
				}
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:89: lines 89-92
		$_g = 0;
		$_g1 = NodeListAccess_Impl_::resolve(FabulaXmlParser::$_xml, "list");
		while ($_g < $_g1->length) {
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:89: characters 8-12
			$list = ($_g1->arr[$_g] ?? null);
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:89: lines 89-92
			++$_g;
		}
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:93: characters 3-32
		return new HxAnon(["sequences" => $sequences]);
	}

	/**
	 * @param \Xml $sequence
	 * @param Sequence $seq
	 * @param \Array_hx $events
	 * @param \Array_hx $branches
	 * @param Choice $parent
	 * 
	 * @return Event
	 */
	public static function parseEvents ($sequence, $seq, $events, $branches, $parent = null) {
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:99: characters 3-26
		$event = null;
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:101: characters 15-32
		$key = $sequence->elements();
		while ($key->hasNext()) {
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:101: lines 101-179
			$key1 = $key->next();
			#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:103: characters 12-20
			$_g = null;
			if ($key1->nodeType === \Xml::$Document) {
				$_g = "Document";
			} else {
				if ($key1->nodeType !== \Xml::$Element) {
					throw Exception::thrown("Bad node type, expected Element but found " . ((($key1->nodeType === null ? "null" : XmlType_Impl_::toString($key1->nodeType)))??'null'));
				}
				$_g = $key1->nodeName;
			}
			if ($_g === "choice") {
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:161: lines 161-165
				if ($event === null) {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:164: characters 7-12
					break;
				}
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:166: characters 31-89
				$defaultValue = (FabulaXmlParser::$ID_GEN_HELPER??'null') . "_C" . (++FabulaXmlParser::$ID_GEN_COUNT);
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:166: characters 51-88
				if ($defaultValue === null) {
					$defaultValue = "";
				}
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:166: characters 31-89
				$_choice = (HasAttribAccess_Impl_::resolve($key1, "id") ? AttribAccess_Impl_::resolve($key1, "id") : $defaultValue);
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:166: characters 91-103
				$_choice1 = FabulaXmlParser::getText($key1);
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:167: characters 7-28
				$_choice2 = (HasAttribAccess_Impl_::resolve($key1, "type") ? AttribAccess_Impl_::resolve($key1, "type") : "");
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:167: characters 30-75
				$_choice3 = FabulaXmlParser::$_conditionFactory->create((HasAttribAccess_Impl_::resolve($key1, "if") ? AttribAccess_Impl_::resolve($key1, "if") : ""));
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:167: characters 77-100
				$_choice4 = (HasAttribAccess_Impl_::resolve($key1, "target") ? AttribAccess_Impl_::resolve($key1, "target") : "");
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:168: characters 7-40
				$defaultValue1 = $event->isExit;
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:168: characters 27-39
				if ($defaultValue1 === null) {
					$defaultValue1 = true;
				}
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:168: characters 7-40
				$_choice5 = (HasAttribAccess_Impl_::resolve($key1, "exit") ? AttribAccess_Impl_::resolve($key1, "exit") === "true" : $defaultValue1);
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:166: lines 166-168
				$_choice6 = new Choice($_choice, $_choice1, $_choice2, $_choice3, $_choice4, $_choice5, (HasAttribAccess_Impl_::resolve($key1, "limit") ? \Std::parseInt(AttribAccess_Impl_::resolve($key1, "limit")) : 0));
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:170: lines 170-176
				if (HasNodeAccess_Impl_::resolve($key1, "variable")) {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:172: lines 172-175
					$_g1 = 0;
					$_g2 = NodeListAccess_Impl_::resolve($key1, "variable");
					while ($_g1 < $_g2->length) {
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:172: characters 12-16
						$vari = ($_g2->arr[$_g1] ?? null);
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:172: lines 172-175
						++$_g1;
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:174: characters 8-56
						$_choice6->addVariable(AttribAccess_Impl_::resolve($vari, "id"), AttribAccess_Impl_::resolve($vari, "value"));
					}
				}
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:177: characters 6-30
				$event->addChoice($_choice6);
			} else if ($_g === "event") {
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:111: characters 23-81
				$defaultValue2 = (FabulaXmlParser::$ID_GEN_HELPER??'null') . "_E" . (++FabulaXmlParser::$ID_GEN_COUNT);
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:111: characters 43-80
				if ($defaultValue2 === null) {
					$defaultValue2 = "";
				}
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:111: characters 6-82
				$_id = (HasAttribAccess_Impl_::resolve($key1, "id") ? AttribAccess_Impl_::resolve($key1, "id") : $defaultValue2);
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:112: characters 6-21
				$_if = null;
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:113: lines 113-122
				if ($parent === null) {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:116: characters 13-32
					$_if = (HasAttribAccess_Impl_::resolve($key1, "if") ? AttribAccess_Impl_::resolve($key1, "if") : "");
				} else {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:120: characters 7-22
					$_if = $parent->id;
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:121: characters 7-26
					$parent->target = $_id;
				}
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:124: characters 29-41
				$event1 = FabulaXmlParser::getText($key1);
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:124: characters 43-72
				$event2 = FabulaXmlParser::$_conditionFactory->create($_if);
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:124: characters 74-100
				$defaultValue3 = false;
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:124: characters 94-99
				if ($defaultValue3 === null) {
					$defaultValue3 = true;
				}
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:124: characters 74-100
				$event3 = (HasAttribAccess_Impl_::resolve($key1, "exit") ? AttribAccess_Impl_::resolve($key1, "exit") === "true" : $defaultValue3);
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:125: characters 7-30
				$defaultValue4 = 1;
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:125: characters 28-29
				if ($defaultValue4 === null) {
					$defaultValue4 = 0;
				}
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:125: characters 7-30
				$event4 = (HasAttribAccess_Impl_::resolve($key1, "weight") ? \Std::parseInt(AttribAccess_Impl_::resolve($key1, "weight")) : $defaultValue4);
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:125: characters 32-51
				$event5 = (HasAttribAccess_Impl_::resolve($key1, "limit") ? \Std::parseInt(AttribAccess_Impl_::resolve($key1, "limit")) : 0);
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:125: characters 53-77
				$event6 = (HasAttribAccess_Impl_::resolve($key1, "speaker") ? AttribAccess_Impl_::resolve($key1, "speaker") : "");
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:126: characters 7-33
				$event7 = (HasAttribAccess_Impl_::resolve($key1, "listeners") ? AttribAccess_Impl_::resolve($key1, "listeners") : "");
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:126: characters 35-63
				$event8 = (HasAttribAccess_Impl_::resolve($key1, "environment") ? AttribAccess_Impl_::resolve($key1, "environment") : "");
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:124: lines 124-126
				$event = new Event($_id, $event1, $event2, $event3, $event4, $event5, $event6, $event7, $event8, (HasAttribAccess_Impl_::resolve($key1, "target") ? AttribAccess_Impl_::resolve($key1, "target") : ""));
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:128: lines 128-155
				if (HasNodeAccess_Impl_::resolve($key1, "choice")) {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:130: lines 130-154
					$_g3 = 0;
					$_g4 = NodeListAccess_Impl_::resolve($key1, "choice");
					while ($_g3 < $_g4->length) {
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:130: characters 12-18
						$choice = ($_g4->arr[$_g3] ?? null);
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:130: lines 130-154
						++$_g3;
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:132: characters 33-94
						$defaultValue5 = (FabulaXmlParser::$ID_GEN_HELPER??'null') . "_C" . (++FabulaXmlParser::$ID_GEN_COUNT);
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:132: characters 56-93
						if ($defaultValue5 === null) {
							$defaultValue5 = "";
						}
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:132: characters 33-94
						$_choice7 = (HasAttribAccess_Impl_::resolve($choice, "id") ? AttribAccess_Impl_::resolve($choice, "id") : $defaultValue5);
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:133: characters 9-24
						$_choice8 = FabulaXmlParser::getText($choice);
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:133: characters 26-50
						$_choice9 = (HasAttribAccess_Impl_::resolve($choice, "type") ? AttribAccess_Impl_::resolve($choice, "type") : "");
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:134: characters 9-57
						$_choice10 = FabulaXmlParser::$_conditionFactory->create((HasAttribAccess_Impl_::resolve($choice, "if") ? AttribAccess_Impl_::resolve($choice, "if") : ""));
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:134: characters 59-85
						$_choice11 = (HasAttribAccess_Impl_::resolve($choice, "target") ? AttribAccess_Impl_::resolve($choice, "target") : "");
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:135: characters 9-45
						$defaultValue6 = $event->isExit;
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:135: characters 32-44
						if ($defaultValue6 === null) {
							$defaultValue6 = true;
						}
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:135: characters 9-45
						$_choice12 = (HasAttribAccess_Impl_::resolve($choice, "exit") ? AttribAccess_Impl_::resolve($choice, "exit") === "true" : $defaultValue6);
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:132: lines 132-135
						$_choice13 = new Choice($_choice7, $_choice8, $_choice9, $_choice10, $_choice11, $_choice12, (HasAttribAccess_Impl_::resolve($choice, "limit") ? \Std::parseInt(AttribAccess_Impl_::resolve($choice, "limit")) : 0));
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:137: lines 137-143
						if (HasNodeAccess_Impl_::resolve($choice, "variable")) {
							#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:139: lines 139-142
							$_g5 = 0;
							$_g6 = NodeListAccess_Impl_::resolve($choice, "variable");
							while ($_g5 < $_g6->length) {
								#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:139: characters 14-18
								$vari1 = ($_g6->arr[$_g5] ?? null);
								#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:139: lines 139-142
								++$_g5;
								#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:141: characters 10-58
								$_choice13->addVariable(AttribAccess_Impl_::resolve($vari1, "id"), AttribAccess_Impl_::resolve($vari1, "value"));
							}
						}
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:145: characters 8-32
						$event->addChoice($_choice13);
						#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:148: lines 148-151
						if (HasNodeAccess_Impl_::resolve($choice, "event")) {
							#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:150: characters 9-60
							FabulaXmlParser::parseEvents($choice, $seq, $events, $branches, $_choice13);
						}
					}
				}
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:156: lines 156-159
				if ($parent === null) {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:157: characters 7-25
					$events->arr[$events->length++] = $event;
				} else {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:159: characters 7-27
					$branches->arr[$branches->length++] = $event;
				}
			} else if ($_g === "variable") {
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:107: characters 10-23
				$tmp = null;
				if ($sequence->nodeType === \Xml::$Document) {
					$tmp = "Document";
				} else {
					if ($sequence->nodeType !== \Xml::$Element) {
						throw Exception::thrown("Bad node type, expected Element but found " . ((($sequence->nodeType === null ? "null" : XmlType_Impl_::toString($sequence->nodeType)))??'null'));
					}
					$tmp = $sequence->nodeName;
				}
				#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:107: lines 107-109
				if ($tmp === "sequence") {
					#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:108: lines 108-109
					$seq->addVariable(AttribAccess_Impl_::resolve($key1, "id"), \Type::createEnum(Boot::getClass(EVariableType::class), \mb_strtoupper(AttribAccess_Impl_::resolve($key1, "type"))), AttribAccess_Impl_::resolve($key1, "value"));
				}
			}
		};
		#C:\HaxeLib\fabula/git/src/fabula/FabulaXmlParser.hx:180: characters 3-15
		return $event;
	}
}

Boot::registerClass(FabulaXmlParser::class, 'fabula.FabulaXmlParser');
