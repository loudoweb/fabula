<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace fabula\condition;

use \php\Boot;
use \haxe\Exception;
use \fabula\Fabula;
use \php\_Boot\HxString;
use \haxe\ds\StringMap;
use \fabula\condition\_EConditionOp\EConditionOp_Impl_;

/**
 * Default factory to build condition. Include event & variable event conditions.
 */
class ConditionFactory {
	/**
	 * @var StringMap
	 *
	 * Map all data to a type of Condition (character, item, skill...)
	 */
	static public $helperList;
	/**
	 * @var \EReg
	 */
	static public $regexp;

	/**
	 * @var Fabula
	 */
	public $fabula;

	/**
	 * @param Fabula $fabula
	 * 
	 * @return void
	 */
	public function __construct ($fabula) {
		#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:22: characters 3-23
		$this->fabula = $fabula;
	}

	/**
	 * @param ConditionCollection $collection
	 * @param string $value
	 * 
	 * @return void
	 */
	public function addToCollection ($collection, $value) {
		#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:72: characters 3-42
		$negation = HxString::indexOf($value, "!") === 0;
		#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:73: lines 73-74
		if ($negation) {
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:74: characters 12-27
			$value = \mb_substr($value, 1, null);
		}
		#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:76: characters 3-38
		$hasMatch = ConditionFactory::$regexp->match($value);
		#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:77: characters 3-34
		$match = null;
		#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:78: characters 3-37
		$operation = null;
		#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:79: lines 79-84
		if ($hasMatch) {
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:81: characters 4-29
			$value = ConditionFactory::$regexp->matched(1);
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:82: characters 4-33
			$operation = ConditionFactory::$regexp->matched(2);
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:83: characters 4-29
			$match = ConditionFactory::$regexp->matched(3);
		}
		#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:86: lines 86-96
		if (($match === "") || ($match === null)) {
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:88: characters 4-19
			$operation = "=";
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:89: characters 4-16
			$match = true;
		} else if ($operation === "(in:") {
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:92: characters 4-20
			$operation = "in";
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:93: characters 4-21
			$temp = $value;
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:94: characters 4-17
			$value = $match;
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:95: characters 4-16
			$match = $temp;
		}
		#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:98: lines 98-113
		if (\array_key_exists($value, ConditionFactory::$helperList->data)) {
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:100: characters 12-33
			$_g = (ConditionFactory::$helperList->data[$value] ?? null);
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:100: lines 100-107
			if ($_g === null) {
				#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:107: characters 6-11
				throw Exception::thrown("[Fabula > Condition] To use other condition type, please override ConditionFactory class and create a Condition class for this type");
			} else {
				#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:100: characters 12-33
				$__hx__switch = ($_g->index);
				if ($__hx__switch === 0) {
					#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:103: characters 6-80
					$collection->add(new ConditionEvent($value, Boot::getInstanceClosure($this->fabula, 'isIDCompleted'), !$negation));
				} else if ($__hx__switch === 1) {
					#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:105: characters 6-94
					$collection->add(new ConditionVariable($value, EConditionOp_Impl_::fromString($operation), $match, Boot::getInstanceClosure($this->fabula, 'getVar'), !$negation));
				} else {
					#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:107: characters 6-11
					throw Exception::thrown("[Fabula > Condition] To use other condition type, please override ConditionFactory class and create a Condition class for this type");
				}
			}
		} else {
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:112: characters 4-78
			$collection->add(new ConditionEvent($value, Boot::getInstanceClosure($this->fabula, 'isIDCompleted'), !$negation));
		}
	}

	/**
	 * Creates a collection of conditions for an event or a choice. That could be also use outside the event/dialogue system.
	 * @param raw String from xml that describes the condition
	 * @return ConditionCollection
	 * 
	 * @param string $raw
	 * 
	 * @return ConditionCollection
	 */
	public function create ($raw) {
		#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:32: characters 3-28
		$values = null;
		#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:33: characters 3-31
		$subValues = null;
		#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:35: lines 35-65
		if ($raw !== "") {
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:37: characters 4-47
			$collection = new ConditionCollection();
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:40: lines 40-43
			if (HxString::indexOf($raw, ",") !== -1) {
				#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:41: characters 5-28
				$values = HxString::split($raw, ",");
			} else {
				#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:43: characters 5-28
				$values = HxString::split($raw, "&");
			}
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:45: lines 45-62
			$_g = 0;
			while ($_g < $values->length) {
				#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:45: characters 9-14
				$value = ($values->arr[$_g] ?? null);
				#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:45: lines 45-62
				++$_g;
				#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:47: lines 47-61
				if (HxString::indexOf($value, "|") !== -1) {
					#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:50: characters 6-45
					$or = new ConditionOr();
					#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:51: characters 6-34
					$subValues = HxString::split($value, "|");
					#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:52: lines 52-55
					$_g1 = 0;
					while ($_g1 < $subValues->length) {
						#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:52: characters 11-19
						$subValue = ($subValues->arr[$_g1] ?? null);
						#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:52: lines 52-55
						++$_g1;
						#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:54: characters 7-36
						$this->addToCollection($or, $subValue);
					}
					#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:56: characters 6-24
					$collection->add($or);
				} else {
					#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:60: characters 6-40
					$this->addToCollection($collection, $value);
				}
			}
			#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:64: characters 4-21
			return $collection;
		}
		#C:\HaxeLib\fabula/git/src/fabula/condition/ConditionFactory.hx:66: characters 3-14
		return null;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$helperList = new StringMap();
		self::$regexp = new \EReg("([a-zA-Z0-9_-]+)(=|!=|>=|<=|<|>|\\(in:)?([a-zA-Z0-9_-]*)", "g");
	}
}

Boot::registerClass(ConditionFactory::class, 'fabula.condition.ConditionFactory');
ConditionFactory::__hx__init();
