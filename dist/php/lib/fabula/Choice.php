<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace fabula;

use \php\Boot;
use \fabula\condition\ConditionCollection;
use \fabula\condition\EConditionType;
use \haxe\ds\StringMap;
use \fabula\condition\ConditionFactory;

/**
 * ...
 * @author Loudo
 */
class Choice {
	/**
	 * @var ConditionCollection
	 * If a condition is set, the choice will appear only if criteria is met
	 */
	public $condition;
	/**
	 * @var int
	 *  To avoid picking up too many time this choice, or for statistical purpose
	 */
	public $count;
	/**
	 * @var string
	 */
	public $id;
	/**
	 * @var bool
	 * A choice can exit the sequence
	 */
	public $isExit;
	/**
	 * @var int
	 * Can be played only 'limit' time. E.g: to play only once, limit should equals 1.
	 */
	public $limit;
	/**
	 * @var string
	 * Resulting event when the player chooses this choice
	 */
	public $target;
	/**
	 * @var string
	 */
	public $text;
	/**
	 * @var string
	 * If you have different kind of choices, and you need to display an information or a particular icon to help the player (choice leading to an attack or a purchase in a shop). Could be also used for feedback
	 */
	public $type;
	/**
	 * @var StringMap
	 */
	public $variables;

	/**
	 * A choice is a clickable element in your game that the player has to click to continue the sequence.
	 * @param id event id
	 * @param text content
	 * @param type information or icon to help the player makes his choice, could be also used for feedback
	 * @param condition condition to display this choice. You can by default use event or choice id.
	 * @param target A target to jump to another event instead of using next event in the sequence.
	 * @param exit Boolean. True to exit the sequence.
	 * 
	 * @param string $id
	 * @param string $text
	 * @param string $type
	 * @param ConditionCollection $condition
	 * @param string $target
	 * @param bool $exit
	 * @param int $limit
	 * 
	 * @return void
	 */
	public function __construct ($id, $text, $type, $condition = null, $target = null, $exit = false, $limit = 0) {
		#C:\HaxeLib\fabula/git/src/fabula/Choice.hx:60: lines 60-71
		if ($exit === null) {
			$exit = false;
		}
		if ($limit === null) {
			$limit = 0;
		}
		#C:\HaxeLib\fabula/git/src/fabula/Choice.hx:61: characters 3-15
		$this->id = $id;
		#C:\HaxeLib\fabula/git/src/fabula/Choice.hx:62: characters 3-53
		$this->text = (($text !== "") && ($text !== null) ? $text : $id);
		#C:\HaxeLib\fabula/git/src/fabula/Choice.hx:63: characters 3-19
		$this->type = $type;
		#C:\HaxeLib\fabula/git/src/fabula/Choice.hx:64: characters 3-23
		$this->target = $target;
		#C:\HaxeLib\fabula/git/src/fabula/Choice.hx:65: characters 3-29
		$this->condition = $condition;
		#C:\HaxeLib\fabula/git/src/fabula/Choice.hx:66: characters 3-21
		$this->isExit = $exit;
		#C:\HaxeLib\fabula/git/src/fabula/Choice.hx:67: characters 3-21
		$this->limit = $limit;
		#C:\HaxeLib\fabula/git/src/fabula/Choice.hx:68: characters 3-17
		$this->count = 0;
		#C:\HaxeLib\fabula/git/src/fabula/Choice.hx:69: characters 3-50
		ConditionFactory::$helperList->data[$this->id] = EConditionType::EVENT();
	}

	/**
	 * @param string $id
	 * @param string $content
	 * 
	 * @return void
	 */
	public function addVariable ($id, $content) {
		#C:\HaxeLib\fabula/git/src/fabula/Choice.hx:75: lines 75-78
		if ($this->variables === null) {
			#C:\HaxeLib\fabula/git/src/fabula/Choice.hx:77: characters 4-39
			$this->variables = new StringMap();
		}
		#C:\HaxeLib\fabula/git/src/fabula/Choice.hx:79: characters 3-29
		$this->variables->data[$id] = $content;
	}
}

Boot::registerClass(Choice::class, 'fabula.Choice');
