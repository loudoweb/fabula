<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace fabula;

use \php\Boot;
use \fabula\condition\ConditionCollection;
use \fabula\condition\EConditionType;
use \fabula\condition\ConditionFactory;

class Event {
	/**
	 * @var \Array_hx
	 */
	public $_cacheChoices;
	/**
	 * @var \Array_hx
	 * Choices are contained inside events.
	 */
	public $choices;
	/**
	 * @var ConditionCollection
	 */
	public $conditions;
	/**
	 * @var int
	 * To avoid picking up too many time this event, or for statistical purpose
	 */
	public $count;
	/**
	 * @var string
	 * Could be use to set position of the camera, the weather, etc.
	 */
	public $environment;
	/**
	 * @var string
	 * Automatically generated if empty
	 * It can be used to display a specific event, redirect from a choice...
	 * It should match the name of your audio file if any.
	 */
	public $id;
	/**
	 * @var bool
	 * Determine if this event should end a sequence
	 */
	public $isExit;
	/**
	 * @var int
	 * Can be played only 'limit' time. E.g: to play only once, limit should equals 1.
	 */
	public $limit;
	/**
	 * @var string
	 * Could be use to set the listeners and their poses if needed
	 */
	public $listeners;
	/**
	 * @var string
	 * Could be use to set the speaker and his pose if needed
	 */
	public $speaker;
	/**
	 * @var string
	 * Optionnal target
	 */
	public $target;
	/**
	 * @var string
	 * This is optional since we could get a localized text using the id
	 */
	public $text;
	/**
	 * @var int
	 * Weight for randomness
	 */
	public $weight;

	/**
	 *
	 * @param id id of the event. Should be unique. You can use this id in conditions and in your localization system to retrieve the text.
	 * @param text text of the event
	 * @param conditions
	 * @param isExit Last event of the sequence.
	 * @param weight TODO
	 * @param limit Default 0 means that you can play infinitely. Set to 1 to play once, 2 to play twice, etc.
	 * @param speaker Help you determine who speaks to display an image.
	 * @param listeners Help you determine who is also present in the dialog scene.
	 * @param environment Help you determine the place where the dialog takes place
	 * @param target Next event id. By Default the next event is the next event in the xml.
	 * 
	 * @param string $id
	 * @param string $text
	 * @param ConditionCollection $conditions
	 * @param bool $isExit
	 * @param int $weight
	 * @param int $limit
	 * @param string $speaker
	 * @param string $listeners
	 * @param string $environment
	 * @param string $target
	 * 
	 * @return void
	 */
	public function __construct ($id, $text, $conditions = null, $isExit = false, $weight = 1, $limit = 0, $speaker = null, $listeners = null, $environment = null, $target = null) {
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:85: lines 85-101
		if ($isExit === null) {
			$isExit = false;
		}
		if ($weight === null) {
			$weight = 1;
		}
		if ($limit === null) {
			$limit = 0;
		}
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:86: characters 3-15
		$this->id = $id;
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:87: characters 3-19
		$this->text = $text;
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:88: characters 3-31
		$this->conditions = $conditions;
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:90: characters 3-23
		$this->isExit = $isExit;
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:91: characters 3-21
		$this->limit = $limit;
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:92: characters 3-17
		$this->count = 0;
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:94: characters 3-25
		$this->speaker = $speaker;
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:95: characters 3-29
		$this->listeners = $listeners;
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:96: characters 3-33
		$this->environment = $environment;
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:98: characters 3-23
		$this->target = $target;
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:100: characters 3-50
		ConditionFactory::$helperList->data[$this->id] = EConditionType::EVENT();
	}

	/**
	 * @param Choice $choice
	 * 
	 * @return void
	 */
	public function addChoice ($choice) {
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:186: lines 186-190
		if ($this->choices === null) {
			#C:\HaxeLib\fabula/git/src/fabula/Event.hx:188: characters 4-16
			$this->choices = new \Array_hx();
			#C:\HaxeLib\fabula/git/src/fabula/Event.hx:189: characters 4-22
			$this->_cacheChoices = new \Array_hx();
		}
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:191: characters 3-23
		$_this = $this->choices;
		$_this->arr[$_this->length++] = $choice;
	}

	/**
	 * Get all choices that meet the condition in the current thread.
	 * @return Array<Choice>
	 * 
	 * @return \Array_hx
	 */
	public function getChoices () {
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:109: characters 3-21
		$this->_cacheChoices = new \Array_hx();
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:110: lines 110-122
		if ($this->choices !== null) {
			#C:\HaxeLib\fabula/git/src/fabula/Event.hx:112: characters 14-18
			$_g = 0;
			#C:\HaxeLib\fabula/git/src/fabula/Event.hx:112: characters 18-32
			$_g1 = $this->choices->length;
			#C:\HaxeLib\fabula/git/src/fabula/Event.hx:112: lines 112-121
			while ($_g < $_g1) {
				#C:\HaxeLib\fabula/git/src/fabula/Event.hx:112: characters 14-32
				$i = $_g++;
				#C:\HaxeLib\fabula/git/src/fabula/Event.hx:114: characters 5-85
				$hasOnceLimit = (($this->choices->arr[$i] ?? null)->limit > 0) && (($this->choices->arr[$i] ?? null)->count >= ($this->choices->arr[$i] ?? null)->limit);
				#C:\HaxeLib\fabula/git/src/fabula/Event.hx:116: lines 116-120
				if (!$hasOnceLimit) {
					#C:\HaxeLib\fabula/git/src/fabula/Event.hx:118: lines 118-119
					if ((($this->choices->arr[$i] ?? null)->condition === null) || ($this->choices->arr[$i] ?? null)->condition->test()) {
						#C:\HaxeLib\fabula/git/src/fabula/Event.hx:119: characters 7-37
						$_this = $this->_cacheChoices;
						$x = ($this->choices->arr[$i] ?? null);
						$_this->arr[$_this->length++] = $x;
					}
				}
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:124: lines 124-133
		if ($this->_cacheChoices->length === 0) {
			#C:\HaxeLib\fabula/git/src/fabula/Event.hx:126: lines 126-132
			if ($this->isExit) {
				#C:\HaxeLib\fabula/git/src/fabula/Event.hx:128: characters 5-78
				$_this = $this->_cacheChoices;
				$x = new Choice("EXIT", Fabula::$QUIT, "quit", null, $this->target, true);
				$_this->arr[$_this->length++] = $x;
			} else {
				#C:\HaxeLib\fabula/git/src/fabula/Event.hx:131: characters 5-84
				$_this = $this->_cacheChoices;
				$x = new Choice("CONTINUE", Fabula::$CONTINUE, "continue", null, $this->target);
				$_this->arr[$_this->length++] = $x;
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:134: characters 3-23
		return $this->_cacheChoices;
	}

	/**
	 * Get a choice from id or index
	 * @param id id of the choice
	 * @param index index of the choice (use it alternatively to id)
	 * @param selectFromAll default to false, set to true if you want to get a choice from the whole list of choices (i.e., a choice that doesn't necessarily met its condition)
	 * @return Choice null if not found
	 * 
	 * @param string $id
	 * @param int $index
	 * @param bool $selectFromAll
	 * 
	 * @return Choice
	 */
	public function selectChoice ($id = null, $index = null, $selectFromAll = false) {
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:145: lines 145-173
		if ($selectFromAll === null) {
			$selectFromAll = false;
		}
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:148: lines 148-151
		if (($this->_cacheChoices === null) || ($this->_cacheChoices->length === 0)) {
			#C:\HaxeLib\fabula/git/src/fabula/Event.hx:150: characters 4-16
			$this->getChoices();
		}
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:153: characters 3-62
		$_choiceArray = ($selectFromAll ? $this->choices : $this->_cacheChoices);
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:154: characters 3-30
		$selected = null;
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:155: lines 155-169
		if ($_choiceArray !== null) {
			#C:\HaxeLib\fabula/git/src/fabula/Event.hx:157: lines 157-168
			if ($id !== null) {
				#C:\HaxeLib\fabula/git/src/fabula/Event.hx:159: characters 15-19
				$_g = 0;
				#C:\HaxeLib\fabula/git/src/fabula/Event.hx:159: characters 19-38
				$_g1 = $_choiceArray->length;
				#C:\HaxeLib\fabula/git/src/fabula/Event.hx:159: lines 159-166
				while ($_g < $_g1) {
					#C:\HaxeLib\fabula/git/src/fabula/Event.hx:159: characters 15-38
					$i = $_g++;
					#C:\HaxeLib\fabula/git/src/fabula/Event.hx:161: lines 161-165
					if (($_choiceArray->arr[$i] ?? null)->id === $id) {
						#C:\HaxeLib\fabula/git/src/fabula/Event.hx:163: characters 7-33
						$selected = ($_choiceArray->arr[$i] ?? null);
						#C:\HaxeLib\fabula/git/src/fabula/Event.hx:164: characters 7-12
						break;
					}
				}
			} else if (($index !== null) && ($index < $_choiceArray->length)) {
				#C:\HaxeLib\fabula/git/src/fabula/Event.hx:168: characters 5-35
				$selected = ($_choiceArray->arr[$index] ?? null);
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:170: lines 170-171
		if ($selected !== null) {
			#C:\HaxeLib\fabula/git/src/fabula/Event.hx:171: characters 4-20
			$selected->count++;
		}
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:172: characters 3-18
		return $selected;
	}

	/**
	 * @return bool
	 */
	public function testConditions () {
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:177: characters 3-50
		$hasOnceLimit = ($this->limit > 0) && ($this->count >= $this->limit);
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:178: lines 178-179
		if ($this->conditions === null) {
			#C:\HaxeLib\fabula/git/src/fabula/Event.hx:179: characters 4-24
			return !$hasOnceLimit;
		}
		#C:\HaxeLib\fabula/git/src/fabula/Event.hx:181: characters 10-44
		if (!$hasOnceLimit) {
			#C:\HaxeLib\fabula/git/src/fabula/Event.hx:181: characters 27-44
			return $this->conditions->test();
		} else {
			#C:\HaxeLib\fabula/git/src/fabula/Event.hx:181: characters 10-44
			return false;
		}
	}
}

Boot::registerClass(Event::class, 'fabula.Event');
