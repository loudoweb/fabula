<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace fabula;

use \fabula\condition\VariableInt;
use \fabula\condition\VariableCycle;
use \fabula\condition\VariableString;
use \php\Boot;
use \fabula\condition\_VariableCollection\VariableCollection_Impl_;
use \fabula\condition\VariableEnum;
use \fabula\condition\EVariableType;
use \fabula\condition\Variable;
use \php\_Boot\HxString;
use \haxe\IMap;
use \fabula\condition\VariableFloat;
use \fabula\condition\ConditionFactory;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;
use \fabula\condition\VariableBool;

class Fabula {
	/**
	 * @var string
	 */
	static public $CONTINUE = "Continue";
	/**
	 * @var string
	 */
	static public $QUIT = "Quit";

	/**
	 * @var \Closure
	 */
	public $_completedCallback;
	/**
	 * @var \Array_hx
	 */
	public $_encountersID;
	/**
	 * @var \Array_hx
	 */
	public $_questsID;
	/**
	 * @var \Array_hx
	 */
	public $_randomEncounters;
	/**
	 * @var \Array_hx
	 */
	public $_sequences;
	/**
	 * @var \Array_hx
	 */
	public $_textsID;
	/**
	 * @var \Array_hx
	 */
	public $completedID;
	/**
	 * @var ConditionFactory
	 */
	public $conditionFactory;
	/**
	 * @var Sequence
	 */
	public $currentSequence;
	/**
	 * @var \Array_hx
	 */
	public $variables;

	/**
	 * Fabula is a sequencial or branch event/dialog system.
	 * Different systems can be used to run through a storyline.
	 * Some story are sequencial, other are branch based, xml are formed differently to optimize manual integration.
	 * A tool could help homogenize xml but not planned yet.
	 * @param files You can use more than one file.
	 * 
	 * @param \Array_hx $files
	 * @param \Closure $completedCallback
	 * 
	 * @return void
	 */
	public function __construct ($files, $completedCallback = null) {
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:57: characters 3-17
		$this->_questsID = new \Array_hx();
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:58: characters 3-21
		$this->_encountersID = new \Array_hx();
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:59: characters 3-16
		$this->_textsID = new \Array_hx();
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:60: characters 3-19
		$this->completedID = new \Array_hx();
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:61: characters 3-41
		$this->_completedCallback = $completedCallback;
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:62: characters 3-48
		$this->conditionFactory = new ConditionFactory($this);
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:64: characters 3-18
		$this->_sequences = new \Array_hx();
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:66: lines 66-69
		$_g = 0;
		while ($_g < $files->length) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:66: characters 8-12
			$file = ($files->arr[$_g] ?? null);
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:66: lines 66-69
			++$_g;
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:68: characters 4-14
			$this->init($file);
		}
	}

	/**
	 * @param string $id
	 * @param EVariableType $type
	 * @param string $startingValue
	 * 
	 * @return void
	 */
	public function addVariable ($id, $type, $startingValue) {
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:230: lines 230-231
		if ($this->variables === null) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:231: characters 16-40
			$this1 = new \Array_hx();
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:231: characters 4-40
			$this->variables = $this1;
		}
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:232: lines 232-246
		$__hx__switch = ($type->index);
		if ($__hx__switch === 0) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:235: characters 5-58
			$_this = $this->variables;
			$x = new VariableString($id, $startingValue);
			$_this->arr[$_this->length++] = $x;
		} else if ($__hx__switch === 1) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:237: characters 5-55
			$_this = $this->variables;
			$x = new VariableInt($id, $startingValue);
			$_this->arr[$_this->length++] = $x;
		} else if ($__hx__switch === 2) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:239: characters 5-57
			$_this = $this->variables;
			$x = new VariableFloat($id, $startingValue);
			$_this->arr[$_this->length++] = $x;
		} else if ($__hx__switch === 3) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:241: characters 5-56
			$_this = $this->variables;
			$x = new VariableBool($id, $startingValue);
			$_this->arr[$_this->length++] = $x;
		} else if ($__hx__switch === 4) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:243: characters 5-56
			$_this = $this->variables;
			$x = new VariableEnum($id, $startingValue);
			$_this->arr[$_this->length++] = $x;
		} else if ($__hx__switch === 5) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:245: characters 5-57
			$_this = $this->variables;
			$x = new VariableCycle($id, $startingValue);
			$_this->arr[$_this->length++] = $x;
		}
	}

	/**
	 * @param \Array_hx $source
	 * @param \Array_hx $adding
	 * 
	 * @return void
	 */
	public function arrayMerge ($source, $adding) {
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:84: characters 13-17
		$_g = 0;
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:84: characters 17-30
		$_g1 = $adding->length;
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:84: lines 84-87
		while ($_g < $_g1) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:84: characters 13-30
			$i = $_g++;
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:86: characters 16-25
			$adding1 = ($adding->arr[$i] ?? null);
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:86: characters 4-26
			$source->arr[$source->length++] = $adding1;
		}
	}

	/**
	 *
	 * WIP: count words
	 * TODO don't count variable and html tag
	 * TODO take into account nbsp
	 * 
	 * @return int
	 */
	public function countWords () {
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:295: characters 3-17
		$count = 0;
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:296: lines 296-312
		$_g = 0;
		$_g1 = $this->_sequences;
		while ($_g < $_g1->length) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:296: characters 8-11
			$seq = ($_g1->arr[$_g] ?? null);
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:296: lines 296-312
			++$_g;
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:298: lines 298-311
			if ($seq->events !== null) {
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:300: lines 300-310
				$_g2 = 0;
				$_g3 = $seq->events;
				while ($_g2 < $_g3->length) {
					#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:300: characters 10-15
					$event = ($_g3->arr[$_g2] ?? null);
					#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:300: lines 300-310
					++$_g2;
					#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:302: characters 6-43
					$count += HxString::split($event->text, " ")->length;
					#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:303: lines 303-309
					if ($event->choices !== null) {
						#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:305: lines 305-308
						$_g4 = 0;
						$_g5 = $event->choices;
						while ($_g4 < $_g5->length) {
							#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:305: characters 12-18
							$choice = ($_g5->arr[$_g4] ?? null);
							#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:305: lines 305-308
							++$_g4;
							#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:307: characters 8-46
							$count += HxString::split($choice->text, " ")->length;
						}
					}
				}
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:313: characters 3-15
		return $count;
	}

	/**
	 * @return Event
	 */
	public function getCurrentEvent () {
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:185: characters 3-36
		return $this->currentSequence->getEvent();
	}

	/**
	 * Get the next event.
	 * @return Event. Null if current event is the last one.
	 * 
	 * @return Event
	 */
	public function getNextEvent () {
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:171: characters 3-50
		$nextEvent = $this->currentSequence->getNextEvent();
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:172: lines 172-179
		if ($nextEvent !== null) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:174: characters 4-21
			$nextEvent->count++;
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:175: characters 4-34
			$_this = $this->completedID;
			$_this->arr[$_this->length++] = $nextEvent->id;
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:176: characters 4-50
			$_this = $this->currentSequence->completedID;
			$_this->arr[$_this->length++] = $nextEvent->id;
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:177: lines 177-178
			if ($this->_completedCallback !== null) {
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:178: characters 5-37
				($this->_completedCallback)($nextEvent->id);
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:180: characters 3-19
		return $nextEvent;
	}

	/**
	 * @param string $name
	 * 
	 * @return Variable
	 */
	public function getVar ($name) {
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:251: characters 3-36
		$out = null;
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:252: lines 252-260
		if ($this->currentSequence !== null) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:254: lines 254-259
			if ($this->currentSequence->variables !== null) {
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:256: characters 5-46
				$out = VariableCollection_Impl_::get($this->currentSequence->variables, $name);
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:257: lines 257-258
				if ($out !== null) {
					#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:258: characters 6-16
					return $out;
				}
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:261: lines 261-264
		if (($out === null) && ($this->variables !== null)) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:263: characters 4-29
			$out = VariableCollection_Impl_::get($this->variables, $name);
		}
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:265: characters 3-13
		return $out;
	}

	/**
	 * @param string $raw
	 * 
	 * @return void
	 */
	public function init ($raw) {
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:75: characters 3-51
		$elements = FabulaXmlParser::parse($raw, $this);
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:76: characters 3-45
		$this->arrayMerge($this->_sequences, $elements->sequences);
	}

	/**
	 * Check if ID of event or choice is completed
	 * @param id
	 * @return Bool
	 * 
	 * @param string $id
	 * 
	 * @return bool
	 */
	public function isIDCompleted ($id) {
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:275: lines 275-283
		if (\mb_substr($id, 0, 1) === ".") {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:278: characters 4-69
			return $this->currentSequence->completedID->indexOf(HxString::substring($id, 1)) !== -1;
		} else {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:282: characters 4-40
			return $this->completedID->indexOf($id) !== -1;
		}
	}

	/**
	 * @param IMap $source
	 * @param IMap $adding
	 * 
	 * @return void
	 */
	public function mapMerge ($source, $adding) {
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:95: characters 24-30
		$_g = $adding->keyValueIterator();
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:95: lines 95-98
		while ($_g->hasNext()) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:95: characters 24-30
			$_g1 = $_g->next();
			$key = $_g1->key;
			$value = $_g1->value;
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:97: characters 4-23
			$source->set($key, $value);
		}
	}

	/**
	 * Reset all data.
	 * 
	 * @return void
	 */
	public function reset () {
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:106: characters 3-44
		$this->completedID->splice(0, $this->completedID->length);
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:107: lines 107-131
		$_g = 0;
		$_g1 = $this->_sequences;
		while ($_g < $_g1->length) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:107: characters 8-11
			$seq = ($_g1->arr[$_g] ?? null);
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:107: lines 107-131
			++$_g;
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:109: lines 109-115
			if ($seq->variables !== null) {
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:111: characters 15-19
				$_g2 = 0;
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:111: characters 19-39
				$_g3 = $seq->variables->length;
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:111: lines 111-114
				while ($_g2 < $_g3) {
					#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:111: characters 15-39
					$i = $_g2++;
					#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:113: characters 6-30
					($seq->variables->arr[$i] ?? null)->reset();
				}
			}
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:117: characters 4-53
			$seq->completedID->splice(0, $seq->completedID->length);
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:119: lines 119-130
			$_g4 = 0;
			$_g5 = $seq->events;
			while ($_g4 < $_g5->length) {
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:119: characters 9-14
				$event = ($_g5->arr[$_g4] ?? null);
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:119: lines 119-130
				++$_g4;
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:121: characters 5-20
				$event->count = 0;
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:123: lines 123-129
				if ($event->choices !== null) {
					#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:125: lines 125-128
					$_g6 = 0;
					$_g7 = $event->choices;
					while ($_g6 < $_g7->length) {
						#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:125: characters 11-17
						$choice = ($_g7->arr[$_g6] ?? null);
						#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:125: lines 125-128
						++$_g6;
						#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:127: characters 7-23
						$choice->count = 0;
					}
				}
			}
		}
	}

	/**
	 * Apply an user choice to the current event of the sequence, add it to the completed list and set variables.
	 * @param id id of the choice
	 * @param index index of the choice (use it alternatively to id)
	 * @return Choice null if not found
	 * 
	 * @param string $id
	 * @param int $index
	 * 
	 * @return Choice
	 */
	public function selectChoice ($id = null, $index = null) {
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:196: characters 3-28
		$choice = null;
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:198: lines 198-223
		if (($this->currentSequence !== null) && ($this->currentSequence->current < $this->currentSequence->events->length)) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:200: characters 4-63
			$choice = $this->currentSequence->getEvent()->selectChoice($id, $index);
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:202: lines 202-222
			if ($choice !== null) {
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:204: lines 204-214
				if ($choice->variables !== null) {
					#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:206: characters 18-41
					$key = new NativeIndexedArrayIterator(\array_values(\array_map("strval", \array_keys($choice->variables->data))));
					while ($key->hasNext()) {
						#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:206: lines 206-213
						$key1 = $key->next();
						#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:208: characters 7-31
						$_vari = $this->getVar($key1);
						#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:209: lines 209-212
						if ($_vari !== null) {
							#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:211: characters 8-44
							$_vari->set(($choice->variables->data[$key1] ?? null));
						}
					}
				}
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:216: characters 5-79
				$this->currentSequence->nextTarget = ($choice->isExit ? "\$\$EXIT\$\$" : $choice->target);
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:218: characters 5-32
				$_this = $this->completedID;
				$_this->arr[$_this->length++] = $choice->id;
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:219: characters 5-48
				$_this = $this->currentSequence->completedID;
				$_this->arr[$_this->length++] = $choice->id;
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:220: lines 220-221
				if ($this->_completedCallback !== null) {
					#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:221: characters 6-35
					($this->_completedCallback)($choice->id);
				}
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:225: characters 3-16
		return $choice;
	}

	/**
	 *
	 * Get a particular sequence.
	 * @param id
	 * @param start true if you want to check conditions, start from beginning and reset variables. false to get a sequence bypassing conditions and without activating it (to check stuff manually, debug purpose etc.)
	 * @return Sequence return sequence if found and conditions met
	 * 
	 * @param string $id
	 * @param bool $start
	 * 
	 * @return Sequence
	 */
	public function selectSequence ($id, $start = true) {
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:142: lines 142-163
		if ($start === null) {
			$start = true;
		}
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:143: characters 13-17
		$_g = 0;
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:143: characters 17-34
		$_g1 = $this->_sequences->length;
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:143: lines 143-161
		while ($_g < $_g1) {
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:143: characters 13-34
			$i = $_g++;
			#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:145: lines 145-160
			if (($this->_sequences->arr[$i] ?? null)->id === $id) {
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:147: characters 5-29
				$seq = ($this->_sequences->arr[$i] ?? null);
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:148: lines 148-158
				if ($start) {
					#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:150: lines 150-157
					if (($seq->conditions === null) || $seq->conditions->test()) {
						#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:152: characters 7-28
						$this->currentSequence = $seq;
						#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:153: characters 7-30
						$this->currentSequence->start();
					} else {
						#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:156: characters 7-18
						return null;
					}
				}
				#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:159: characters 5-15
				return $seq;
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/Fabula.hx:162: characters 3-14
		return null;
	}
}

Boot::registerClass(Fabula::class, 'fabula.Fabula');
