<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace fabula;

use \fabula\condition\VariableInt;
use \fabula\condition\VariableCycle;
use \fabula\condition\VariableString;
use \php\Boot;
use \fabula\condition\ConditionCollection;
use \fabula\condition\VariableEnum;
use \fabula\condition\EVariableType;
use \fabula\condition\VariableFloat;
use \fabula\condition\VariableBool;

class Sequence {
	/**
	 * @var string
	 * Internal tag to make a choice exit a sequence
	 */
	const EXIT = "\$\$EXIT\$\$";

	/**
	 * @var \Array_hx
	 */
	public $branches;
	/**
	 * @var \Array_hx
	 */
	public $completedID;
	/**
	 * @var ConditionCollection
	 */
	public $conditions;
	/**
	 * @var int
	 */
	public $current;
	/**
	 * @var string
	 */
	public $currentId;
	/**
	 * @var \Array_hx
	 */
	public $events;
	/**
	 * @var string
	 */
	public $id;
	/**
	 * @var string
	 */
	public $nextTarget;
	/**
	 * @var int
	 */
	public $numCompleted;
	/**
	 * @var \Array_hx
	 */
	public $variables;

	/**
	 * @param string $id
	 * 
	 * @return void
	 */
	public function __construct ($id) {
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:37: characters 3-15
		$this->id = $id;
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:38: characters 3-15
		$this->current = -1;
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:39: characters 3-19
		$this->currentId = null;
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:40: characters 3-19
		$this->numCompleted = 0;
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:41: characters 3-20
		$this->nextTarget = null;
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:42: characters 3-19
		$this->completedID = new \Array_hx();
	}

	/**
	 * @param ConditionCollection $conditions
	 * 
	 * @return void
	 */
	public function addConditions ($conditions) {
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:47: characters 3-31
		$this->conditions = $conditions;
	}

	/**
	 * @param \Array_hx $events
	 * @param \Array_hx $branches
	 * 
	 * @return void
	 */
	public function addSequence ($events, $branches) {
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:73: characters 7-51
		$tmp = ($this->events !== null) || ($this->branches !== null);
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:75: characters 3-23
		$this->events = $events;
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:76: characters 3-27
		$this->branches = $branches;
	}

	/**
	 * @param string $id
	 * @param EVariableType $type
	 * @param string $startingValue
	 * 
	 * @return void
	 */
	public function addVariable ($id, $type, $startingValue) {
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:52: lines 52-53
		if ($this->variables === null) {
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:53: characters 16-40
			$this1 = new \Array_hx();
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:53: characters 4-40
			$this->variables = $this1;
		}
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:54: lines 54-68
		$__hx__switch = ($type->index);
		if ($__hx__switch === 0) {
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:57: characters 5-58
			$_this = $this->variables;
			$x = new VariableString($id, $startingValue);
			$_this->arr[$_this->length++] = $x;
		} else if ($__hx__switch === 1) {
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:59: characters 5-55
			$_this = $this->variables;
			$x = new VariableInt($id, $startingValue);
			$_this->arr[$_this->length++] = $x;
		} else if ($__hx__switch === 2) {
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:61: characters 5-57
			$_this = $this->variables;
			$x = new VariableFloat($id, $startingValue);
			$_this->arr[$_this->length++] = $x;
		} else if ($__hx__switch === 3) {
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:63: characters 5-56
			$_this = $this->variables;
			$x = new VariableBool($id, $startingValue);
			$_this->arr[$_this->length++] = $x;
		} else if ($__hx__switch === 4) {
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:65: characters 5-56
			$_this = $this->variables;
			$x = new VariableEnum($id, $startingValue);
			$_this->arr[$_this->length++] = $x;
		} else if ($__hx__switch === 5) {
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:67: characters 5-57
			$_this = $this->variables;
			$x = new VariableCycle($id, $startingValue);
			$_this->arr[$_this->length++] = $x;
		}
	}

	/**
	 * Jump to a specific event (usually because a choice has a specific target event set)
	 * @param id id of the event. If null returns current event
	 * @return Event.
	 * 
	 * @param string $id
	 * 
	 * @return Event
	 */
	public function getEvent ($id = null) {
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:155: lines 155-158
		if ($id === null) {
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:157: characters 4-18
			$id = $this->currentId;
		}
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:161: characters 13-17
		$_g = 0;
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:161: characters 17-30
		$_g1 = $this->events->length;
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:161: lines 161-169
		while ($_g < $_g1) {
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:161: characters 13-30
			$i = $_g++;
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:163: lines 163-168
			if (($this->events->arr[$i] ?? null)->id === $id) {
				#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:165: characters 5-16
				$this->current = $i;
				#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:166: characters 5-19
				$this->currentId = $id;
				#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:167: characters 5-21
				return ($this->events->arr[$i] ?? null);
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:171: characters 13-17
		$_g = 0;
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:171: characters 17-32
		$_g1 = $this->branches->length;
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:171: lines 171-178
		while ($_g < $_g1) {
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:171: characters 13-32
			$i = $_g++;
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:173: lines 173-177
			if (($this->branches->arr[$i] ?? null)->id === $id) {
				#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:175: characters 5-19
				$this->currentId = $id;
				#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:176: characters 5-23
				return ($this->branches->arr[$i] ?? null);
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:180: characters 3-14
		return null;
	}

	/**
	 * Call this method to get the next method (apply conditions and exit)
	 * @param ignoreExit use internally, don't use
	 * @return Event
	 * 
	 * @param bool $ignoreExit
	 * 
	 * @return Event
	 */
	public function getNextEvent ($ignoreExit = false) {
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:102: lines 102-146
		if ($ignoreExit === null) {
			$ignoreExit = false;
		}
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:103: lines 103-111
		if (!$ignoreExit && ($this->current > -1) && ($this->current < $this->events->length)) {
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:105: lines 105-110
			if (($this->events->arr[$this->current] ?? null)->isExit || ($this->nextTarget === "\$\$EXIT\$\$")) {
				#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:107: characters 5-19
				$this->numCompleted++;
				#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:109: characters 5-16
				return null;
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:113: lines 113-144
		if (($this->current + 1) <= $this->events->length) {
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:116: lines 116-127
			if ($this->current >= 0) {
				#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:118: lines 118-126
				if (($this->nextTarget !== null) && ($this->nextTarget !== "")) {
					#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:120: characters 6-30
					$target = $this->nextTarget;
					#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:121: characters 6-23
					$this->nextTarget = null;
					#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:122: characters 6-29
					return $this->getEvent($target);
				} else if ((($this->events->arr[$this->current] ?? null)->target !== null) && (($this->events->arr[$this->current] ?? null)->target !== "")) {
					#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:125: characters 6-45
					return $this->getEvent(($this->events->arr[$this->current] ?? null)->target);
				}
			}
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:129: characters 4-13
			$this->current++;
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:130: lines 130-143
			if ($this->current < $this->events->length) {
				#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:132: characters 5-37
				$nextEvent = ($this->events->arr[$this->current] ?? null);
				#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:133: lines 133-138
				if ($nextEvent->testConditions()) {
					#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:135: characters 6-30
					$this->currentId = $nextEvent->id;
					#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:136: characters 6-22
					return $nextEvent;
				} else {
					#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:138: characters 6-31
					return $this->getNextEvent(true);
				}
			} else {
				#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:141: characters 5-19
				$this->numCompleted++;
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:145: characters 3-14
		return null;
	}

	/**
	 * @return void
	 */
	public function start () {
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:81: characters 3-15
		$this->current = -1;
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:82: characters 3-20
		$this->nextTarget = null;
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:83: characters 3-19
		$this->currentId = null;
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:85: lines 85-91
		if ($this->variables !== null) {
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:87: characters 14-18
			$_g = 0;
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:87: characters 18-34
			$_g1 = $this->variables->length;
			#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:87: lines 87-90
			while ($_g < $_g1) {
				#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:87: characters 14-34
				$i = $_g++;
				#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:89: characters 5-25
				($this->variables->arr[$i] ?? null)->reset();
			}
		}
		#C:\HaxeLib\fabula/git/src/fabula/Sequence.hx:93: characters 3-44
		$this->completedID->splice(0, $this->completedID->length);
	}
}

Boot::registerClass(Sequence::class, 'fabula.Sequence');
