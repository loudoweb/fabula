<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace haxe\ds;

use \php\Boot;
use \haxe\iterators\MapKeyValueIterator;
use \haxe\IMap;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;

/**
 * StringMap allows mapping of String keys to arbitrary values.
 * See `Map` for documentation details.
 * @see https://haxe.org/manual/std-Map.html
 */
class StringMap implements IMap {
	/**
	 * @var mixed
	 */
	public $data;

	/**
	 * Creates a new StringMap.
	 * 
	 * @return void
	 */
	public function __construct () {
		#C:\haxeToolkit_415\haxe\std/php/_std/haxe/ds/StringMap.hx:35: characters 10-32
		$this1 = [];
		#C:\haxeToolkit_415\haxe\std/php/_std/haxe/ds/StringMap.hx:35: characters 3-32
		$this->data = $this1;
	}

	/**
	 * See `Map.get`
	 * 
	 * @param string $key
	 * 
	 * @return mixed
	 */
	public function get ($key) {
		#C:\haxeToolkit_415\haxe\std/php/_std/haxe/ds/StringMap.hx:43: characters 3-42
		return ($this->data[$key] ?? null);
	}

	/**
	 * See `Map.keyValueIterator`
	 * 
	 * @return object
	 */
	public function keyValueIterator () {
		#C:\haxeToolkit_415\haxe\std/php/_std/haxe/ds/StringMap.hx:70: characters 3-54
		return new MapKeyValueIterator($this);
	}

	/**
	 * See `Map.keys`
	 * (cs, java) Implementation detail: Do not `set()` any new value while
	 * iterating, as it may cause a resize, which will break iteration.
	 * 
	 * @return object
	 */
	public function keys () {
		#C:\haxeToolkit_415\haxe\std/php/_std/haxe/ds/StringMap.hx:60: characters 10-72
		return new NativeIndexedArrayIterator(\array_values(\array_map("strval", \array_keys($this->data))));
	}

	/**
	 * See `Map.set`
	 * 
	 * @param string $key
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function set ($key, $value) {
		#C:\haxeToolkit_415\haxe\std/php/_std/haxe/ds/StringMap.hx:39: characters 3-20
		$this->data[$key] = $value;
	}
}

Boot::registerClass(StringMap::class, 'haxe.ds.StringMap');
